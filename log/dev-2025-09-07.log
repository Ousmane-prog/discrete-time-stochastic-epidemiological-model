┌ Info: 2025-09-07 15:24:38 Watching ["/workspaces/discrete-time-stochastic-epidemiological-model"]
└ @ GenieAutoReload /home/codespace/.julia/packages/GenieAutoReload/qpImd/src/GenieAutoReload.jl:19
┌ Info: 2025-09-07 15:24:40 Autoreloading
└ @ GenieAutoReload /home/codespace/.julia/packages/GenieAutoReload/qpImd/src/GenieAutoReload.jl:22
┌ Info: 2025-09-07 15:24:46 
│ Web Server starting at http://127.0.0.1:8000 
└ @ Genie.Server /home/codespace/.julia/packages/Genie/y1eGj/src/Server.jl:182
┌ Info: 2025-09-07 15:24:46 Listening on: 127.0.0.1:8000, thread id: 1
└ @ HTTP.Servers /home/codespace/.julia/packages/HTTP/JcAHX/src/Servers.jl:382
┌ Warning: 2025-09-07 15:25:05 UndefVarError(:plotly, Main.App)
└ @ Genie.Renderer.Html /home/codespace/.julia/packages/Genie/y1eGj/src/renderers/Html.jl:154
┌ Warning: 2025-09-07 15:25:05 UndefVarError(:plotly, Main.App)
└ @ Genie.Renderer.Html /home/codespace/.julia/packages/Genie/y1eGj/src/renderers/Html.jl:154
┌ Warning: 2025-09-07 15:25:05 UndefVarError(:plotly, Main.App)
└ @ Genie.Renderer.Html /home/codespace/.julia/packages/Genie/y1eGj/src/renderers/Html.jl:154
┌ Warning: 2025-09-07 15:25:05 UndefVarError(:plotly, Main.App)
└ @ Genie.Renderer.Html /home/codespace/.julia/packages/Genie/y1eGj/src/renderers/Html.jl:154
┌ Info: 2025-09-07 15:27:12 Calling finalizers
└ @ Stipple /home/codespace/.julia/packages/Stipple/HO9IP/src/Stipple.jl:540
┌ Error: 2025-09-07 15:29:12 Failed to revise /workspaces/discrete-time-stochastic-epidemiological-model/app.jl
│   exception = (LoadError("/home/codespace/.julia/packages/Stipple/HO9IP/src/ReactiveTools.jl", 768, MethodError(Stipple.ReactiveTools.var"@out", (:(#= /workspaces/discrete-time-stochastic-epidemiological-model/app.jl:18 =#), Main.App), 0x0000000000006b4e)), Union{Ptr{Nothing}, Base.InterpreterIP}[])
└ @ Revise /home/codespace/.julia/packages/Revise/PSzoa/src/packagedef.jl:743
┌ Warning: 2025-09-07 15:29:14 The running code does not match the saved version for the following files:
│ 
│   /workspaces/discrete-time-stochastic-epidemiological-model/app.jl
│ 
│ If the error was due to evaluation order, it can sometimes be resolved by calling `Revise.retry()`.
│ Use Revise.errors() to report errors again. Only the first error in each file is shown.
│ Your prompt color may be yellow until the errors are resolved.
└ @ Revise /home/codespace/.julia/packages/Revise/PSzoa/src/packagedef.jl:859
┌ Error: 2025-09-07 15:30:14 Failed to revise /workspaces/discrete-time-stochastic-epidemiological-model/app.jl
│   exception = (LoadError("/home/codespace/.julia/packages/Stipple/HO9IP/src/ReactiveTools.jl", 768, ErrorException("type Symbol has no field args")), Union{Ptr{Nothing}, Base.InterpreterIP}[])
└ @ Revise /home/codespace/.julia/packages/Revise/PSzoa/src/packagedef.jl:743
┌ Warning: 2025-09-07 15:30:15 The running code does not match the saved version for the following files:
│ 
│   /workspaces/discrete-time-stochastic-epidemiological-model/app.jl
│ 
│ If the error was due to evaluation order, it can sometimes be resolved by calling `Revise.retry()`.
│ Use Revise.errors() to report errors again. Only the first error in each file is shown.
│ Your prompt color may be yellow until the errors are resolved.
└ @ Revise /home/codespace/.julia/packages/Revise/PSzoa/src/packagedef.jl:859
┌ Error: 2025-09-07 15:30:45 Failed to revise /workspaces/discrete-time-stochastic-epidemiological-model/app.jl
│   exception = (Base.Meta.ParseError("ParseError:\n# Error @ /workspaces/discrete-time-stochastic-epidemiological-model/app.jl:19:22\n    @out S0_discrete = 990\n    @out I0_discrete ) 10\n#                    └ ── Expected `end`", Base.JuliaSyntax.ParseError(Base.JuliaSyntax.SourceFile("module App\n\ninclude(\"lib/DiscreteTimeSIModel.jl\")  \nusing Turing, MCMCChains, GenieFramework, PlotlyBase, StippleLatex, StatsPlots, Random, Distributions, Statistics\nusing .DiscreteTimeSIModel\nRandom.seed!(14)\n\n@genietools\n\n@app begin\n    # Define reactive variables \n    @in beta = 0.52\n    @in gamma = 0.24\n    # @in noise_level = 0.3  \n    # @in S0_discrete = 990\n    # @in I0_discrete = 10\n    # @in R0_discrete = 0\n    @out S0_discrete = 990\n    @out I0_discrete ) 10\n    @out \n    @in time_steps = 100\n    @in delta_t = 0.1\n    @in n_realizations = 50\n\n    # Plot for ODE solutions\n    @out solplot = []  \n    @out solplot_layout = PlotlyBase.Layout(\n        title=\"SI Model Simulation\",\n        xaxis_title=\"Time\",\n        yaxis_title=\"Population\",\n        template=\"plotly_white\"\n    )\n    \n    # Stochastic discrete model plots\n    @out stochastic_plot = []\n    @out stochastic_plot_layout = PlotlyBase.Layout(\n        title=\"Stochastic Discrete SIR Model\",\n        xaxis_title=\"Time Steps\",\n        yaxis_title=\"Population\",\n        template=\"plotly_white\"\n    )\n    \n    @out ensemble_plot = []\n    @out ensemble_plot_layout = PlotlyBase.Layout(\n        title=\"Stochastic SIR Model Ensemble (Multiple Realizations)\",\n        xaxis_title=\"Time Steps\", \n        yaxis_title=\"Population\",\n        template=\"plotly_white\"\n    )\n    \n    @out data_plot = []\n    @out data_plot_layout = PlotlyBase.Layout(\n        title=\"Synthetic Data\",\n        xaxis_title=\"Time\",\n        yaxis_title=\"Population\",\n        template=\"plotly_white\"\n    )\n    @out beta_mean = 0.0\n    @out gamma_mean = 0.0\n    @out beta_std = 0.0\n    @out gamma_std = 0.0\n    @out beta_mcse = 0.0\n    @out gamma_mcse = 0.0\n    @out beta_ess_bulk = 0.0\n    @out gamma_ess_bulk = 0.0\n    @out beta_ess_tail = 0.0\n    @out gamma_ess_tail = 0.0\n    # @out summary_stats = 0\n\n    @private u0 = [0.99, 0.01]  \n    @private tspan = (0.0, 100.0)  \n    @private t = 0.0:1.0:100.0  # Time points for solution\n    @private true_p = [0.52, 0.24]\n\n    \n    @onchange beta, gamma, S0_discrete, I0_discrete, R0_discrete, time_steps, delta_t begin\n        try\n            # Single realization of stochastic model\n            S_stoch, I_stoch, R_stoch = simulate_SIR_discrete_stochastic(\n                S0_discrete, I0_discrete, R0_discrete, beta, gamma, time_steps; Δt=delta_t\n            )\n            \n            time_points = 0:time_steps\n            stochastic_plot = [\n                PlotlyBase.scatter(x=time_points, y=S_stoch, mode=\"lines+markers\", name=\"Susceptible (Stochastic)\", line=Dict(\"color\" => \"blue\")),\n                PlotlyBase.scatter(x=time_points, y=I_stoch, mode=\"lines+markers\", name=\"Infected (Stochastic)\", line=Dict(\"color\" => \"red\")),\n                PlotlyBase.scatter(x=time_points, y=R_stoch, mode=\"lines+markers\", name=\"Recovered (Stochastic)\", line=Dict(\"color\" => \"green\"))\n            ]\n        catch e\n            println(\"Error in stochastic simulation: \", e)\n        end\n    end\n    \n    # Stochastic ensemble visualization\n    @onchange n_realizations, beta, gamma, S0_discrete, I0_discrete, R0_discrete, time_steps, delta_t begin\n        try\n            # Multiple realizations for ensemble analysis\n            S_ensemble, I_ensemble, R_ensemble = simulate_SIR_stochastic_ensemble(\n                S0_discrete, I0_discrete, R0_discrete, beta, gamma, time_steps, n_realizations; Δt=delta_t\n            )\n            \n            time_points = 0:time_steps\n            \n            # Calculate mean and percentiles for uncertainty bounds\n            S_mean = mean(S_ensemble, dims=2)[:]\n            I_mean = mean(I_ensemble, dims=2)[:]\n            R_mean = mean(R_ensemble, dims=2)[:]\n            \n            S_lower = [quantile(S_ensemble[i,:], 0.05) for i in 1:eachindex(S_ensemble,1)]\n            S_upper = [quantile(S_ensemble[i,:], 0.95) for i in 1:eachindex(S_ensemble,1)]\n            I_lower = [quantile(I_ensemble[i,:], 0.05) for i in 1:eachindex(I_ensemble,1)]\n            I_upper = [quantile(I_ensemble[i,:], 0.95) for i in 1:eachindex(I_ensemble,1)]\n            R_lower = [quantile(R_ensemble[i,:], 0.05) for i in 1:eachindex(R_ensemble,1)]\n            R_upper = [quantile(R_ensemble[i,:], 0.95) for i in 1:eachindex(R_ensemble,1)]\n\n            ensemble_plot = [\n                # Mean trajectories\n                PlotlyBase.scatter(x=time_points, y=S_mean, mode=\"lines\", name=\"Susceptible (Mean)\", line=Dict(\"color\" => \"blue\")),\n                PlotlyBase.scatter(x=time_points, y=I_mean, mode=\"lines\", name=\"Infected (Mean)\", line=Dict(\"color\" => \"red\")),\n                PlotlyBase.scatter(x=time_points, y=R_mean, mode=\"lines\", name=\"Recovered (Mean)\", line=Dict(\"color\" => \"green\")),\n                \n                # Uncertainty bands (90% CI)\n                PlotlyBase.scatter(x=time_points, y=S_upper, fill=\"none\", mode=\"lines\", line=Dict(\"color\" => \"rgba(0,0,255,0)\"), showlegend=false),\n                PlotlyBase.scatter(x=time_points, y=S_lower, fill=\"tonexty\", mode=\"lines\", line=Dict(\"color\" => \"rgba(0,0,255,0)\"), \n                    fillcolor=\"rgba(0,0,255,0.2)\", name=\"Susceptible (90% CI)\"),\n                    \n                PlotlyBase.scatter(x=time_points, y=I_upper, fill=\"none\", mode=\"lines\", line=Dict(\"color\" => \"rgba(255,0,0,0)\"), showlegend=false),\n                PlotlyBase.scatter(x=time_points, y=I_lower, fill=\"tonexty\", mode=\"lines\", line=Dict(\"color\" => \"rgba(255,0,0,0)\"), \n                    fillcolor=\"rgba(255,0,0,0.2)\", name=\"Infected (90% CI)\"),\n                    \n                PlotlyBase.scatter(x=time_points, y=R_upper, fill=\"none\", mode=\"lines\", line=Dict(\"color\" => \"rgba(0,255,0,0)\"), showlegend=false),\n                PlotlyBase.scatter(x=time_points, y=R_lower, fill=\"tonexty\", mode=\"lines\", line=Dict(\"color\" => \"rgba(0,255,0,0)\"), \n                    fillcolor=\"rgba(0,255,0,0.2)\", name=\"Recovered (90% CI)\")\n            ]\n        catch e\n            println(\"Error in ensemble simulation: \", e)\n        end\n    end  \nend\n\nmeta = Dict(\n    \"og:title\" => \"SI Model Simulation\",\n    \"og:description\" => \"Real-time simulation of an SI epidemic model with adjustable parameters and Bayesian inference.\",\n    \"og:image\" => \"/preview.jpg\"\n)\n\nlayout = DEFAULT_LAYOUT(meta=meta)\n@page(\"/\", \"app.jl.html\", layout)\n\nend", 0, "/workspaces/discrete-time-stochastic-epidemiological-model/app.jl", 1, [1, 12, 13, 53, 167, 194, 211, 212, 224, 225, 236, 269, 289, 310, 340, 368, 395, 421, 448, 474, 484, 509, 531, 559, 560, 589, 613, 658, 695, 723, 757, 789, 795, 800, 838, 868, 921, 968, 1002, 1036, 1068, 1074, 1079, 1107, 1158, 1229, 1264, 1298, 1330, 1336, 1341, 1365, 1412, 1444, 1472, 1506, 1538, 1544, 1569, 1595, 1619, 1644, 1669, 1695, 1724, 1754, 1783, 1813, 1842, 1843, 1876, 1912, 1971, 2006, 2007, 2012, 2104, 2116, 2169, 2243, 2335, 2349, 2362, 2401, 2433, 2580, 2723, 2868, 2882, 2898, 2957, 2969, 2977, 2982, 3022, 3130, 3142, 3200, 3283, 3391, 3405, 3418, 3457, 3470, 3538, 3587, 3636, 3685, 3698, 3789, 3880, 3971, 4062, 4153, 4244, 4245, 4275, 4311, 4443, 4571, 4702, 4719, 4764, 4912, 5045, 5126, 5147, 5295, 5428, 5506, 5527, 5675, 5808, 5886, 5900, 5916, 5973, 5985, 5995, 5999, 6000, 6013, 6054, 6177, 6210, 6212, 6213, 6248, 6282, 6283, 6286]), Base.JuliaSyntax.Diagnostic[Base.JuliaSyntax.Diagnostic(469, 468, :error, "Expected `end`"), Base.JuliaSyntax.Diagnostic(469, 468, :error, "Expected `end`"), Base.JuliaSyntax.Diagnostic(469, 472, :error, "extra tokens after end of expression"), Base.JuliaSyntax.Diagnostic(5995, 5997, :error, "invalid identifier"), Base.JuliaSyntax.Diagnostic(6283, 6285, :error, "invalid identifier")], :none)), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x00007f0e6a2d68c7, Ptr{Nothing} @0x00007f0e6a2e6364, Ptr{Nothing} @0x00007f0e6a2e5e2c, Ptr{Nothing} @0x00007f0e6a2e6f97, Ptr{Nothing} @0x00007f0e6a2e7b3d, Base.InterpreterIP in top-level CodeInfo for Revise at statement 0])
└ @ Revise /home/codespace/.julia/packages/Revise/PSzoa/src/packagedef.jl:743
┌ Error: 2025-09-07 15:31:16 Failed to revise /workspaces/discrete-time-stochastic-epidemiological-model/app.jl
│   exception = (Base.Meta.ParseError("ParseError:\n# Error @ /workspaces/discrete-time-stochastic-epidemiological-model/app.jl:19:22\n    @out S0_discrete = 990\n    @out I0_discrete ) 10\n#                    └ ── Expected `end`", Base.JuliaSyntax.ParseError(Base.JuliaSyntax.SourceFile("module App\n\ninclude(\"lib/DiscreteTimeSIModel.jl\")  \nusing Turing, MCMCChains, GenieFramework, PlotlyBase, StippleLatex, StatsPlots, Random, Distributions, Statistics\nusing .DiscreteTimeSIModel\nRandom.seed!(14)\n\n@genietools\n\n@app begin\n    # Define reactive variables \n    @in beta = 0.52\n    @in gamma = 0.24\n    # @in noise_level = 0.3  \n    # @in S0_discrete = 990\n    # @in I0_discrete = 10\n    # @in R0_discrete = 0\n    @out S0_discrete = 990\n    @out I0_discrete ) 10\n    @out R0_discrete = 0\n    @in time_steps = 100\n    @in delta_t = 0.1\n    @in n_realizations = 50\n\n    # Plot for ODE solutions\n    @out solplot = []  \n    @out solplot_layout = PlotlyBase.Layout(\n        title=\"SI Model Simulation\",\n        xaxis_title=\"Time\",\n        yaxis_title=\"Population\",\n        template=\"plotly_white\"\n    )\n    \n    # Stochastic discrete model plots\n    @out stochastic_plot = []\n    @out stochastic_plot_layout = PlotlyBase.Layout(\n        title=\"Stochastic Discrete SIR Model\",\n        xaxis_title=\"Time Steps\",\n        yaxis_title=\"Population\",\n        template=\"plotly_white\"\n    )\n    \n    @out ensemble_plot = []\n    @out ensemble_plot_layout = PlotlyBase.Layout(\n        title=\"Stochastic SIR Model Ensemble (Multiple Realizations)\",\n        xaxis_title=\"Time Steps\", \n        yaxis_title=\"Population\",\n        template=\"plotly_white\"\n    )\n    \n    @out data_plot = []\n    @out data_plot_layout = PlotlyBase.Layout(\n        title=\"Synthetic Data\",\n        xaxis_title=\"Time\",\n        yaxis_title=\"Population\",\n        template=\"plotly_white\"\n    )\n    @out beta_mean = 0.0\n    @out gamma_mean = 0.0\n    @out beta_std = 0.0\n    @out gamma_std = 0.0\n    @out beta_mcse = 0.0\n    @out gamma_mcse = 0.0\n    @out beta_ess_bulk = 0.0\n    @out gamma_ess_bulk = 0.0\n    @out beta_ess_tail = 0.0\n    @out gamma_ess_tail = 0.0\n    # @out summary_stats = 0\n\n    @private u0 = [0.99, 0.01]  \n    @private tspan = (0.0, 100.0)  \n    @private t = 0.0:1.0:100.0  # Time points for solution\n    @private true_p = [0.52, 0.24]\n\n    \n    @onchange beta, gamma, S0_discrete, I0_discrete, R0_discrete, time_steps, delta_t begin\n        try\n            # Single realization of stochastic model\n            S_stoch, I_stoch, R_stoch = simulate_SIR_discrete_stochastic(\n                S0_discrete, I0_discrete, R0_discrete, beta, gamma, time_steps; Δt=delta_t\n            )\n            \n            time_points = 0:time_steps\n            stochastic_plot = [\n                PlotlyBase.scatter(x=time_points, y=S_stoch, mode=\"lines+markers\", name=\"Susceptible (Stochastic)\", line=Dict(\"color\" => \"blue\")),\n                PlotlyBase.scatter(x=time_points, y=I_stoch, mode=\"lines+markers\", name=\"Infected (Stochastic)\", line=Dict(\"color\" => \"red\")),\n                PlotlyBase.scatter(x=time_points, y=R_stoch, mode=\"lines+markers\", name=\"Recovered (Stochastic)\", line=Dict(\"color\" => \"green\"))\n            ]\n        catch e\n            println(\"Error in stochastic simulation: \", e)\n        end\n    end\n    \n    # Stochastic ensemble visualization\n    @onchange n_realizations, beta, gamma, S0_discrete, I0_discrete, R0_discrete, time_steps, delta_t begin\n        try\n            # Multiple realizations for ensemble analysis\n            S_ensemble, I_ensemble, R_ensemble = simulate_SIR_stochastic_ensemble(\n                S0_discrete, I0_discrete, R0_discrete, beta, gamma, time_steps, n_realizations; Δt=delta_t\n            )\n            \n            time_points = 0:time_steps\n            \n            # Calculate mean and percentiles for uncertainty bounds\n            S_mean = mean(S_ensemble, dims=2)[:]\n            I_mean = mean(I_ensemble, dims=2)[:]\n            R_mean = mean(R_ensemble, dims=2)[:]\n            \n            S_lower = [quantile(S_ensemble[i,:], 0.05) for i in 1:eachindex(S_ensemble,1)]\n            S_upper = [quantile(S_ensemble[i,:], 0.95) for i in 1:eachindex(S_ensemble,1)]\n            I_lower = [quantile(I_ensemble[i,:], 0.05) for i in 1:eachindex(I_ensemble,1)]\n            I_upper = [quantile(I_ensemble[i,:], 0.95) for i in 1:eachindex(I_ensemble,1)]\n            R_lower = [quantile(R_ensemble[i,:], 0.05) for i in 1:eachindex(R_ensemble,1)]\n            R_upper = [quantile(R_ensemble[i,:], 0.95) for i in 1:eachindex(R_ensemble,1)]\n\n            ensemble_plot = [\n                # Mean trajectories\n                PlotlyBase.scatter(x=time_points, y=S_mean, mode=\"lines\", name=\"Susceptible (Mean)\", line=Dict(\"color\" => \"blue\")),\n                PlotlyBase.scatter(x=time_points, y=I_mean, mode=\"lines\", name=\"Infected (Mean)\", line=Dict(\"color\" => \"red\")),\n                PlotlyBase.scatter(x=time_points, y=R_mean, mode=\"lines\", name=\"Recovered (Mean)\", line=Dict(\"color\" => \"green\")),\n                \n                # Uncertainty bands (90% CI)\n                PlotlyBase.scatter(x=time_points, y=S_upper, fill=\"none\", mode=\"lines\", line=Dict(\"color\" => \"rgba(0,0,255,0)\"), showlegend=false),\n                PlotlyBase.scatter(x=time_points, y=S_lower, fill=\"tonexty\", mode=\"lines\", line=Dict(\"color\" => \"rgba(0,0,255,0)\"), \n                    fillcolor=\"rgba(0,0,255,0.2)\", name=\"Susceptible (90% CI)\"),\n                    \n                PlotlyBase.scatter(x=time_points, y=I_upper, fill=\"none\", mode=\"lines\", line=Dict(\"color\" => \"rgba(255,0,0,0)\"), showlegend=false),\n                PlotlyBase.scatter(x=time_points, y=I_lower, fill=\"tonexty\", mode=\"lines\", line=Dict(\"color\" => \"rgba(255,0,0,0)\"), \n                    fillcolor=\"rgba(255,0,0,0.2)\", name=\"Infected (90% CI)\"),\n                    \n                PlotlyBase.scatter(x=time_points, y=R_upper, fill=\"none\", mode=\"lines\", line=Dict(\"color\" => \"rgba(0,255,0,0)\"), showlegend=false),\n                PlotlyBase.scatter(x=time_points, y=R_lower, fill=\"tonexty\", mode=\"lines\", line=Dict(\"color\" => \"rgba(0,255,0,0)\"), \n                    fillcolor=\"rgba(0,255,0,0.2)\", name=\"Recovered (90% CI)\")\n            ]\n        catch e\n            println(\"Error in ensemble simulation: \", e)\n        end\n    end  \nend\n\nmeta = Dict(\n    \"og:title\" => \"SI Model Simulation\",\n    \"og:description\" => \"Real-time simulation of an SI epidemic model with adjustable parameters and Bayesian inference.\",\n    \"og:image\" => \"/preview.jpg\"\n)\n\nlayout = DEFAULT_LAYOUT(meta=meta)\n@page(\"/\", \"app.jl.html\", layout)\n\nend", 0, "/workspaces/discrete-time-stochastic-epidemiological-model/app.jl", 1, [1, 12, 13, 53, 167, 194, 211, 212, 224, 225, 236, 269, 289, 310, 340, 368, 395, 421, 448, 474, 499, 524, 546, 574, 575, 604, 628, 673, 710, 738, 772, 804, 810, 815, 853, 883, 936, 983, 1017, 1051, 1083, 1089, 1094, 1122, 1173, 1244, 1279, 1313, 1345, 1351, 1356, 1380, 1427, 1459, 1487, 1521, 1553, 1559, 1584, 1610, 1634, 1659, 1684, 1710, 1739, 1769, 1798, 1828, 1857, 1858, 1891, 1927, 1986, 2021, 2022, 2027, 2119, 2131, 2184, 2258, 2350, 2364, 2377, 2416, 2448, 2595, 2738, 2883, 2897, 2913, 2972, 2984, 2992, 2997, 3037, 3145, 3157, 3215, 3298, 3406, 3420, 3433, 3472, 3485, 3553, 3602, 3651, 3700, 3713, 3804, 3895, 3986, 4077, 4168, 4259, 4260, 4290, 4326, 4458, 4586, 4717, 4734, 4779, 4927, 5060, 5141, 5162, 5310, 5443, 5521, 5542, 5690, 5823, 5901, 5915, 5931, 5988, 6000, 6010, 6014, 6015, 6028, 6069, 6192, 6225, 6227, 6228, 6263, 6297, 6298, 6301]), Base.JuliaSyntax.Diagnostic[Base.JuliaSyntax.Diagnostic(469, 468, :error, "Expected `end`"), Base.JuliaSyntax.Diagnostic(469, 468, :error, "Expected `end`"), Base.JuliaSyntax.Diagnostic(469, 472, :error, "extra tokens after end of expression"), Base.JuliaSyntax.Diagnostic(6010, 6012, :error, "invalid identifier"), Base.JuliaSyntax.Diagnostic(6298, 6300, :error, "invalid identifier")], :none)), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x00007f0e6a2d68c7, Ptr{Nothing} @0x00007f0e6a2e6364, Ptr{Nothing} @0x00007f0e6a2e5e2c, Ptr{Nothing} @0x00007f0e6a2e6f97, Ptr{Nothing} @0x00007f0e6a2e7b3d, Base.InterpreterIP in top-level CodeInfo for Revise at statement 0])
└ @ Revise /home/codespace/.julia/packages/Revise/PSzoa/src/packagedef.jl:743
┌ Error: 2025-09-07 15:31:46 Failed to revise /workspaces/discrete-time-stochastic-epidemiological-model/app.jl
│   exception = (Base.Meta.ParseError("ParseError:\n# Error @ /workspaces/discrete-time-stochastic-epidemiological-model/app.jl:19:22\n    @out S0_discrete = 990\n    @out I0_discrete ) 10\n#                    └ ── Expected `end`", Base.JuliaSyntax.ParseError(Base.JuliaSyntax.SourceFile("module App\n\ninclude(\"lib/DiscreteTimeSIModel.jl\")  \nusing Turing, MCMCChains, GenieFramework, PlotlyBase, StippleLatex, StatsPlots, Random, Distributions, Statistics\nusing .DiscreteTimeSIModel\nRandom.seed!(14)\n\n@genietools\n\n@app begin\n    # Define reactive variables \n    @in beta = 0.52\n    @in gamma = 0.24\n    # @in noise_level = 0.3  \n    # @in S0_discrete = 990\n    # @in I0_discrete = 10\n    # @in R0_discrete = 0\n    @out S0_discrete = 990\n    @out I0_discrete ) 10\n    @out R0_discrete = 0\n    @in time_steps = 100\n    @in delta_t = 0.1\n    @in n_realizations = 50\n\n    # Plot for ODE solutions\n    @out solplot = []  \n    @out solplot_layout = PlotlyBase.Layout(\n        title=\"SI Model Simulation\",\n        xaxis_title=\"Time\",\n        yaxis_title=\"Population\",\n        template=\"plotly_white\"\n    )\n    \n    # Stochastic discrete model plots\n    @out stochastic_plot = []\n    @out stochastic_plot_layout = PlotlyBase.Layout(\n        title=\"Stochastic Discrete SIR Model\",\n        xaxis_title=\"Time Steps\",\n        yaxis_title=\"Population\",\n        template=\"plotly_white\"\n    )\n    \n    @out ensemble_plot = []\n    @out ensemble_plot_layout = PlotlyBase.Layout(\n        title=\"Stochastic SIR Model Ensemble (Multiple Realizations)\",\n        xaxis_title=\"Time Steps\", \n        yaxis_title=\"Population\",\n        template=\"plotly_white\"\n    )\n    \n    @out data_plot = []\n    @out data_plot_layout = PlotlyBase.Layout(\n        title=\"Synthetic Data\",\n        xaxis_title=\"Time\",\n        yaxis_title=\"Population\",\n        template=\"plotly_white\"\n    )\n  \n\n    \n    @onchange beta, gamma, S0_discrete, I0_discrete, R0_discrete, time_steps, delta_t begin\n        try\n            # Single realization of stochastic model\n            S_stoch, I_stoch, R_stoch = simulate_SIR_discrete_stochastic(\n                S0_discrete, I0_discrete, R0_discrete, beta, gamma, time_steps; Δt=delta_t\n            )\n            \n            time_points = 0:time_steps\n            stochastic_plot = [\n                PlotlyBase.scatter(x=time_points, y=S_stoch, mode=\"lines+markers\", name=\"Susceptible (Stochastic)\", line=Dict(\"color\" => \"blue\")),\n                PlotlyBase.scatter(x=time_points, y=I_stoch, mode=\"lines+markers\", name=\"Infected (Stochastic)\", line=Dict(\"color\" => \"red\")),\n                PlotlyBase.scatter(x=time_points, y=R_stoch, mode=\"lines+markers\", name=\"Recovered (Stochastic)\", line=Dict(\"color\" => \"green\"))\n            ]\n        catch e\n            println(\"Error in stochastic simulation: \", e)\n        end\n    end\n    \n    # Stochastic ensemble visualization\n    @onchange n_realizations, beta, gamma, S0_discrete, I0_discrete, R0_discrete, time_steps, delta_t begin\n        try\n            # Multiple realizations for ensemble analysis\n            S_ensemble, I_ensemble, R_ensemble = simulate_SIR_stochastic_ensemble(\n                S0_discrete, I0_discrete, R0_discrete, beta, gamma, time_steps, n_realizations; Δt=delta_t\n            )\n            \n            time_points = 0:time_steps\n            \n            # Calculate mean and percentiles for uncertainty bounds\n            S_mean = mean(S_ensemble, dims=2)[:]\n            I_mean = mean(I_ensemble, dims=2)[:]\n            R_mean = mean(R_ensemble, dims=2)[:]\n            \n            S_lower = [quantile(S_ensemble[i,:], 0.05) for i in 1:eachindex(S_ensemble,1)]\n            S_upper = [quantile(S_ensemble[i,:], 0.95) for i in 1:eachindex(S_ensemble,1)]\n            I_lower = [quantile(I_ensemble[i,:], 0.05) for i in 1:eachindex(I_ensemble,1)]\n            I_upper = [quantile(I_ensemble[i,:], 0.95) for i in 1:eachindex(I_ensemble,1)]\n            R_lower = [quantile(R_ensemble[i,:], 0.05) for i in 1:eachindex(R_ensemble,1)]\n            R_upper = [quantile(R_ensemble[i,:], 0.95) for i in 1:eachindex(R_ensemble,1)]\n\n            ensemble_plot = [\n                # Mean trajectories\n                PlotlyBase.scatter(x=time_points, y=S_mean, mode=\"lines\", name=\"Susceptible (Mean)\", line=Dict(\"color\" => \"blue\")),\n                PlotlyBase.scatter(x=time_points, y=I_mean, mode=\"lines\", name=\"Infected (Mean)\", line=Dict(\"color\" => \"red\")),\n                PlotlyBase.scatter(x=time_points, y=R_mean, mode=\"lines\", name=\"Recovered (Mean)\", line=Dict(\"color\" => \"green\")),\n                \n                # Uncertainty bands (90% CI)\n                PlotlyBase.scatter(x=time_points, y=S_upper, fill=\"none\", mode=\"lines\", line=Dict(\"color\" => \"rgba(0,0,255,0)\"), showlegend=false),\n                PlotlyBase.scatter(x=time_points, y=S_lower, fill=\"tonexty\", mode=\"lines\", line=Dict(\"color\" => \"rgba(0,0,255,0)\"), \n                    fillcolor=\"rgba(0,0,255,0.2)\", name=\"Susceptible (90% CI)\"),\n                    \n                PlotlyBase.scatter(x=time_points, y=I_upper, fill=\"none\", mode=\"lines\", line=Dict(\"color\" => \"rgba(255,0,0,0)\"), showlegend=false),\n                PlotlyBase.scatter(x=time_points, y=I_lower, fill=\"tonexty\", mode=\"lines\", line=Dict(\"color\" => \"rgba(255,0,0,0)\"), \n                    fillcolor=\"rgba(255,0,0,0.2)\", name=\"Infected (90% CI)\"),\n                    \n                PlotlyBase.scatter(x=time_points, y=R_upper, fill=\"none\", mode=\"lines\", line=Dict(\"color\" => \"rgba(0,255,0,0)\"), showlegend=false),\n                PlotlyBase.scatter(x=time_points, y=R_lower, fill=\"tonexty\", mode=\"lines\", line=Dict(\"color\" => \"rgba(0,255,0,0)\"), \n                    fillcolor=\"rgba(0,255,0,0.2)\", name=\"Recovered (90% CI)\")\n            ]\n        catch e\n            println(\"Error in ensemble simulation: \", e)\n        end\n    end  \nend\n\nmeta = Dict(\n    \"og:title\" => \"SI Model Simulation\",\n    \"og:description\" => \"Real-time simulation of an SI epidemic model with adjustable parameters and Bayesian inference.\",\n    \"og:image\" => \"/preview.jpg\"\n)\n\nlayout = DEFAULT_LAYOUT(meta=meta)\n@page(\"/\", \"app.jl.html\", layout)\n\nend", 0, "/workspaces/discrete-time-stochastic-epidemiological-model/app.jl", 1, [1, 12, 13, 53, 167, 194, 211, 212, 224, 225, 236, 269, 289, 310, 340, 368, 395, 421, 448, 474, 499, 524, 546, 574, 575, 604, 628, 673, 710, 738, 772, 804, 810, 815, 853, 883, 936, 983, 1017, 1051, 1083, 1089, 1094, 1122, 1173, 1244, 1279, 1313, 1345, 1351, 1356, 1380, 1427, 1459, 1487, 1521, 1553, 1559, 1562, 1563, 1568, 1660, 1672, 1725, 1799, 1891, 1905, 1918, 1957, 1989, 2136, 2279, 2424, 2438, 2454, 2513, 2525, 2533, 2538, 2578, 2686, 2698, 2756, 2839, 2947, 2961, 2974, 3013, 3026, 3094, 3143, 3192, 3241, 3254, 3345, 3436, 3527, 3618, 3709, 3800, 3801, 3831, 3867, 3999, 4127, 4258, 4275, 4320, 4468, 4601, 4682, 4703, 4851, 4984, 5062, 5083, 5231, 5364, 5442, 5456, 5472, 5529, 5541, 5551, 5555, 5556, 5569, 5610, 5733, 5766, 5768, 5769, 5804, 5838, 5839, 5842]), Base.JuliaSyntax.Diagnostic[Base.JuliaSyntax.Diagnostic(469, 468, :error, "Expected `end`"), Base.JuliaSyntax.Diagnostic(469, 468, :error, "Expected `end`"), Base.JuliaSyntax.Diagnostic(469, 472, :error, "extra tokens after end of expression"), Base.JuliaSyntax.Diagnostic(5551, 5553, :error, "invalid identifier"), Base.JuliaSyntax.Diagnostic(5839, 5841, :error, "invalid identifier")], :none)), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x00007f0e6a2d68c7, Ptr{Nothing} @0x00007f0e6a2e6364, Ptr{Nothing} @0x00007f0e6a2e5e2c, Ptr{Nothing} @0x00007f0e6a2e6f97, Ptr{Nothing} @0x00007f0e6a2e7b3d, Base.InterpreterIP in top-level CodeInfo for Revise at statement 0])
└ @ Revise /home/codespace/.julia/packages/Revise/PSzoa/src/packagedef.jl:743
┌ Error: 2025-09-07 15:32:16 Failed to revise /workspaces/discrete-time-stochastic-epidemiological-model/app.jl
│   exception = (Base.Meta.ParseError("ParseError:\n# Error @ /workspaces/discrete-time-stochastic-epidemiological-model/app.jl:19:22\n    @out S0_discrete = 990\n    @out I0_discrete ) 10\n#                    └ ── Expected `end`", Base.JuliaSyntax.ParseError(Base.JuliaSyntax.SourceFile("module App\n\ninclude(\"lib/DiscreteTimeSIModel.jl\")  \nusing Turing, MCMCChains, GenieFramework, PlotlyBase, StippleLatex, StatsPlots, Random, Distributions, Statistics\nusing .DiscreteTimeSIModel\nRandom.seed!(14)\n\n@genietools\n\n@app begin\n    # Define reactive variables \n    @in beta = 0.52\n    @in gamma = 0.24\n    # @in noise_level = 0.3  \n    # @in S0_discrete = 990\n    # @in I0_discrete = 10\n    # @in R0_discrete = 0\n    @out S0_discrete = 990\n    @out I0_discrete ) 10\n    @out R0_discrete = 0\n    @ time_steps = 100\n    @in delta_t = 0.1\n    @in n_realizations = 50\n\n    # Plot for ODE solutions\n    @out solplot = []  \n    @out solplot_layout = PlotlyBase.Layout(\n        title=\"SI Model Simulation\",\n        xaxis_title=\"Time\",\n        yaxis_title=\"Population\",\n        template=\"plotly_white\"\n    )\n    \n    # Stochastic discrete model plots\n    @out stochastic_plot = []\n    @out stochastic_plot_layout = PlotlyBase.Layout(\n        title=\"Stochastic Discrete SIR Model\",\n        xaxis_title=\"Time Steps\",\n        yaxis_title=\"Population\",\n        template=\"plotly_white\"\n    )\n    \n    @out ensemble_plot = []\n    @out ensemble_plot_layout = PlotlyBase.Layout(\n        title=\"Stochastic SIR Model Ensemble (Multiple Realizations)\",\n        xaxis_title=\"Time Steps\", \n        yaxis_title=\"Population\",\n        template=\"plotly_white\"\n    )\n    \n    @out data_plot = []\n    @out data_plot_layout = PlotlyBase.Layout(\n        title=\"Synthetic Data\",\n        xaxis_title=\"Time\",\n        yaxis_title=\"Population\",\n        template=\"plotly_white\"\n    )\n  \n\n    \n    @onchange beta, gamma, time_steps, delta_t begin\n        try\n            # Single realization of stochastic model\n            S_stoch, I_stoch, R_stoch = simulate_SIR_discrete_stochastic(\n                S0_discrete, I0_discrete, R0_discrete, beta, gamma, time_steps; Δt=delta_t\n            )\n            \n            time_points = 0:time_steps\n            stochastic_plot = [\n                PlotlyBase.scatter(x=time_points, y=S_stoch, mode=\"lines+markers\", name=\"Susceptible (Stochastic)\", line=Dict(\"color\" => \"blue\")),\n                PlotlyBase.scatter(x=time_points, y=I_stoch, mode=\"lines+markers\", name=\"Infected (Stochastic)\", line=Dict(\"color\" => \"red\")),\n                PlotlyBase.scatter(x=time_points, y=R_stoch, mode=\"lines+markers\", name=\"Recovered (Stochastic)\", line=Dict(\"color\" => \"green\"))\n            ]\n        catch e\n            println(\"Error in stochastic simulation: \", e)\n        end\n    end\n    \n    # Stochastic ensemble visualization\n    @onchange n_realizations, beta, gamma, S0_discrete, I0_discrete, R0_discrete, time_steps, delta_t begin\n        try\n            # Multiple realizations for ensemble analysis\n            S_ensemble, I_ensemble, R_ensemble = simulate_SIR_stochastic_ensemble(\n                S0_discrete, I0_discrete, R0_discrete, beta, gamma, time_steps, n_realizations; Δt=delta_t\n            )\n            \n            time_points = 0:time_steps\n            \n            # Calculate mean and percentiles for uncertainty bounds\n            S_mean = mean(S_ensemble, dims=2)[:]\n            I_mean = mean(I_ensemble, dims=2)[:]\n            R_mean = mean(R_ensemble, dims=2)[:]\n            \n            S_lower = [quantile(S_ensemble[i,:], 0.05) for i in 1:eachindex(S_ensemble,1)]\n            S_upper = [quantile(S_ensemble[i,:], 0.95) for i in 1:eachindex(S_ensemble,1)]\n            I_lower = [quantile(I_ensemble[i,:], 0.05) for i in 1:eachindex(I_ensemble,1)]\n            I_upper = [quantile(I_ensemble[i,:], 0.95) for i in 1:eachindex(I_ensemble,1)]\n            R_lower = [quantile(R_ensemble[i,:], 0.05) for i in 1:eachindex(R_ensemble,1)]\n            R_upper = [quantile(R_ensemble[i,:], 0.95) for i in 1:eachindex(R_ensemble,1)]\n\n            ensemble_plot = [\n                # Mean trajectories\n                PlotlyBase.scatter(x=time_points, y=S_mean, mode=\"lines\", name=\"Susceptible (Mean)\", line=Dict(\"color\" => \"blue\")),\n                PlotlyBase.scatter(x=time_points, y=I_mean, mode=\"lines\", name=\"Infected (Mean)\", line=Dict(\"color\" => \"red\")),\n                PlotlyBase.scatter(x=time_points, y=R_mean, mode=\"lines\", name=\"Recovered (Mean)\", line=Dict(\"color\" => \"green\")),\n                \n                # Uncertainty bands (90% CI)\n                PlotlyBase.scatter(x=time_points, y=S_upper, fill=\"none\", mode=\"lines\", line=Dict(\"color\" => \"rgba(0,0,255,0)\"), showlegend=false),\n                PlotlyBase.scatter(x=time_points, y=S_lower, fill=\"tonexty\", mode=\"lines\", line=Dict(\"color\" => \"rgba(0,0,255,0)\"), \n                    fillcolor=\"rgba(0,0,255,0.2)\", name=\"Susceptible (90% CI)\"),\n                    \n                PlotlyBase.scatter(x=time_points, y=I_upper, fill=\"none\", mode=\"lines\", line=Dict(\"color\" => \"rgba(255,0,0,0)\"), showlegend=false),\n                PlotlyBase.scatter(x=time_points, y=I_lower, fill=\"tonexty\", mode=\"lines\", line=Dict(\"color\" => \"rgba(255,0,0,0)\"), \n                    fillcolor=\"rgba(255,0,0,0.2)\", name=\"Infected (90% CI)\"),\n                    \n                PlotlyBase.scatter(x=time_points, y=R_upper, fill=\"none\", mode=\"lines\", line=Dict(\"color\" => \"rgba(0,255,0,0)\"), showlegend=false),\n                PlotlyBase.scatter(x=time_points, y=R_lower, fill=\"tonexty\", mode=\"lines\", line=Dict(\"color\" => \"rgba(0,255,0,0)\"), \n                    fillcolor=\"rgba(0,255,0,0.2)\", name=\"Recovered (90% CI)\")\n            ]\n        catch e\n            println(\"Error in ensemble simulation: \", e)\n        end\n    end  \nend\n\nmeta = Dict(\n    \"og:title\" => \"SI Model Simulation\",\n    \"og:description\" => \"Real-time simulation of an SI epidemic model with adjustable parameters and Bayesian inference.\",\n    \"og:image\" => \"/preview.jpg\"\n)\n\nlayout = DEFAULT_LAYOUT(meta=meta)\n@page(\"/\", \"app.jl.html\", layout)\n\nend", 0, "/workspaces/discrete-time-stochastic-epidemiological-model/app.jl", 1, [1, 12, 13, 53, 167, 194, 211, 212, 224, 225, 236, 269, 289, 310, 340, 368, 395, 421, 448, 474, 499, 522, 544, 572, 573, 602, 626, 671, 708, 736, 770, 802, 808, 813, 851, 881, 934, 981, 1015, 1049, 1081, 1087, 1092, 1120, 1171, 1242, 1277, 1311, 1343, 1349, 1354, 1378, 1425, 1457, 1485, 1519, 1551, 1557, 1560, 1561, 1566, 1619, 1631, 1684, 1758, 1850, 1864, 1877, 1916, 1948, 2095, 2238, 2383, 2397, 2413, 2472, 2484, 2492, 2497, 2537, 2645, 2657, 2715, 2798, 2906, 2920, 2933, 2972, 2985, 3053, 3102, 3151, 3200, 3213, 3304, 3395, 3486, 3577, 3668, 3759, 3760, 3790, 3826, 3958, 4086, 4217, 4234, 4279, 4427, 4560, 4641, 4662, 4810, 4943, 5021, 5042, 5190, 5323, 5401, 5415, 5431, 5488, 5500, 5510, 5514, 5515, 5528, 5569, 5692, 5725, 5727, 5728, 5763, 5797, 5798, 5801]), Base.JuliaSyntax.Diagnostic[Base.JuliaSyntax.Diagnostic(469, 468, :error, "Expected `end`"), Base.JuliaSyntax.Diagnostic(469, 468, :error, "Expected `end`"), Base.JuliaSyntax.Diagnostic(469, 472, :error, "extra tokens after end of expression"), Base.JuliaSyntax.Diagnostic(504, 504, :error, "whitespace is not allowed here"), Base.JuliaSyntax.Diagnostic(516, 516, :error, "unexpected `=`"), Base.JuliaSyntax.Diagnostic(5510, 5512, :error, "invalid identifier"), Base.JuliaSyntax.Diagnostic(5798, 5800, :error, "invalid identifier")], :none)), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x00007f0e6a2d68c7, Ptr{Nothing} @0x00007f0e6a2e6364, Ptr{Nothing} @0x00007f0e6a2e5e2c, Ptr{Nothing} @0x00007f0e6a2e6f97, Ptr{Nothing} @0x00007f0e6a2e7b3d, Base.InterpreterIP in top-level CodeInfo for Revise at statement 0])
└ @ Revise /home/codespace/.julia/packages/Revise/PSzoa/src/packagedef.jl:743
┌ Error: 2025-09-07 15:32:46 Failed to revise /workspaces/discrete-time-stochastic-epidemiological-model/app.jl
│   exception = (Base.Meta.ParseError("ParseError:\n# Error @ /workspaces/discrete-time-stochastic-epidemiological-model/app.jl:19:22\n    @out S0_discrete = 990\n    @out I0_discrete ) 10\n#                    └ ── Expected `end`", Base.JuliaSyntax.ParseError(Base.JuliaSyntax.SourceFile("module App\n\ninclude(\"lib/DiscreteTimeSIModel.jl\")  \nusing Turing, MCMCChains, GenieFramework, PlotlyBase, StippleLatex, StatsPlots, Random, Distributions, Statistics\nusing .DiscreteTimeSIModel\nRandom.seed!(14)\n\n@genietools\n\n@app begin\n    # Define reactive variables \n    @in beta = 0.52\n    @in gamma = 0.24\n    # @in noise_level = 0.3  \n    # @in S0_discrete = 990\n    # @in I0_discrete = 10\n    # @in R0_discrete = 0\n    @out S0_discrete = 990\n    @out I0_discrete ) 10\n    @out R0_discrete = 0\n    @out time_steps = 100\n    @in delta_t = 0.1\n    @in n_realizations = 50\n\n    # Plot for ODE solutions\n    @out solplot = []  \n    @out solplot_layout = PlotlyBase.Layout(\n        title=\"SI Model Simulation\",\n        xaxis_title=\"Time\",\n        yaxis_title=\"Population\",\n        template=\"plotly_white\"\n    )\n    \n    # Stochastic discrete model plots\n    @out stochastic_plot = []\n    @out stochastic_plot_layout = PlotlyBase.Layout(\n        title=\"Stochastic Discrete SIR Model\",\n        xaxis_title=\"Time Steps\",\n        yaxis_title=\"Population\",\n        template=\"plotly_white\"\n    )\n    \n    @out ensemble_plot = []\n    @out ensemble_plot_layout = PlotlyBase.Layout(\n        title=\"Stochastic SIR Model Ensemble (Multiple Realizations)\",\n        xaxis_title=\"Time Steps\", \n        yaxis_title=\"Population\",\n        template=\"plotly_white\"\n    )\n    \n    @out data_plot = []\n    @out data_plot_layout = PlotlyBase.Layout(\n        title=\"Synthetic Data\",\n        xaxis_title=\"Time\",\n        yaxis_title=\"Population\",\n        template=\"plotly_white\"\n    )\n  \n\n    \n    @onchange beta, gamma, time_steps, delta_t begin\n        try\n            # Single realization of stochastic model\n            S_stoch, I_stoch, R_stoch = simulate_SIR_discrete_stochastic(\n                S0_discrete, I0_discrete, R0_discrete, beta, gamma, time_steps; Δt=delta_t\n            )\n            \n            time_points = 0:time_steps\n            stochastic_plot = [\n                PlotlyBase.scatter(x=time_points, y=S_stoch, mode=\"lines+markers\", name=\"Susceptible (Stochastic)\", line=Dict(\"color\" => \"blue\")),\n                PlotlyBase.scatter(x=time_points, y=I_stoch, mode=\"lines+markers\", name=\"Infected (Stochastic)\", line=Dict(\"color\" => \"red\")),\n                PlotlyBase.scatter(x=time_points, y=R_stoch, mode=\"lines+markers\", name=\"Recovered (Stochastic)\", line=Dict(\"color\" => \"green\"))\n            ]\n        catch e\n            println(\"Error in stochastic simulation: \", e)\n        end\n    end\n    \n    # Stochastic ensemble visualization\n    @onchange n_realizations, beta, gamma, S0_discrete, I0_discrete, R0_discrete, time_steps, delta_t begin\n        try\n            # Multiple realizations for ensemble analysis\n            S_ensemble, I_ensemble, R_ensemble = simulate_SIR_stochastic_ensemble(\n                S0_discrete, I0_discrete, R0_discrete, beta, gamma, time_steps, n_realizations; Δt=delta_t\n            )\n            \n            time_points = 0:time_steps\n            \n            # Calculate mean and percentiles for uncertainty bounds\n            S_mean = mean(S_ensemble, dims=2)[:]\n            I_mean = mean(I_ensemble, dims=2)[:]\n            R_mean = mean(R_ensemble, dims=2)[:]\n            \n            S_lower = [quantile(S_ensemble[i,:], 0.05) for i in 1:eachindex(S_ensemble,1)]\n            S_upper = [quantile(S_ensemble[i,:], 0.95) for i in 1:eachindex(S_ensemble,1)]\n            I_lower = [quantile(I_ensemble[i,:], 0.05) for i in 1:eachindex(I_ensemble,1)]\n            I_upper = [quantile(I_ensemble[i,:], 0.95) for i in 1:eachindex(I_ensemble,1)]\n            R_lower = [quantile(R_ensemble[i,:], 0.05) for i in 1:eachindex(R_ensemble,1)]\n            R_upper = [quantile(R_ensemble[i,:], 0.95) for i in 1:eachindex(R_ensemble,1)]\n\n            ensemble_plot = [\n                # Mean trajectories\n                PlotlyBase.scatter(x=time_points, y=S_mean, mode=\"lines\", name=\"Susceptible (Mean)\", line=Dict(\"color\" => \"blue\")),\n                PlotlyBase.scatter(x=time_points, y=I_mean, mode=\"lines\", name=\"Infected (Mean)\", line=Dict(\"color\" => \"red\")),\n                PlotlyBase.scatter(x=time_points, y=R_mean, mode=\"lines\", name=\"Recovered (Mean)\", line=Dict(\"color\" => \"green\")),\n                \n                # Uncertainty bands (90% CI)\n                PlotlyBase.scatter(x=time_points, y=S_upper, fill=\"none\", mode=\"lines\", line=Dict(\"color\" => \"rgba(0,0,255,0)\"), showlegend=false),\n                PlotlyBase.scatter(x=time_points, y=S_lower, fill=\"tonexty\", mode=\"lines\", line=Dict(\"color\" => \"rgba(0,0,255,0)\"), \n                    fillcolor=\"rgba(0,0,255,0.2)\", name=\"Susceptible (90% CI)\"),\n                    \n                PlotlyBase.scatter(x=time_points, y=I_upper, fill=\"none\", mode=\"lines\", line=Dict(\"color\" => \"rgba(255,0,0,0)\"), showlegend=false),\n                PlotlyBase.scatter(x=time_points, y=I_lower, fill=\"tonexty\", mode=\"lines\", line=Dict(\"color\" => \"rgba(255,0,0,0)\"), \n                    fillcolor=\"rgba(255,0,0,0.2)\", name=\"Infected (90% CI)\"),\n                    \n                PlotlyBase.scatter(x=time_points, y=R_upper, fill=\"none\", mode=\"lines\", line=Dict(\"color\" => \"rgba(0,255,0,0)\"), showlegend=false),\n                PlotlyBase.scatter(x=time_points, y=R_lower, fill=\"tonexty\", mode=\"lines\", line=Dict(\"color\" => \"rgba(0,255,0,0)\"), \n                    fillcolor=\"rgba(0,255,0,0.2)\", name=\"Recovered (90% CI)\")\n            ]\n        catch e\n            println(\"Error in ensemble simulation: \", e)\n        end\n    end  \nend\n\nmeta = Dict(\n    \"og:title\" => \"SI Model Simulation\",\n    \"og:description\" => \"Real-time simulation of an SI epidemic model with adjustable parameters and Bayesian inference.\",\n    \"og:image\" => \"/preview.jpg\"\n)\n\nlayout = DEFAULT_LAYOUT(meta=meta)\n@page(\"/\", \"app.jl.html\", layout)\n\nend", 0, "/workspaces/discrete-time-stochastic-epidemiological-model/app.jl", 1, [1, 12, 13, 53, 167, 194, 211, 212, 224, 225, 236, 269, 289, 310, 340, 368, 395, 421, 448, 474, 499, 525, 547, 575, 576, 605, 629, 674, 711, 739, 773, 805, 811, 816, 854, 884, 937, 984, 1018, 1052, 1084, 1090, 1095, 1123, 1174, 1245, 1280, 1314, 1346, 1352, 1357, 1381, 1428, 1460, 1488, 1522, 1554, 1560, 1563, 1564, 1569, 1622, 1634, 1687, 1761, 1853, 1867, 1880, 1919, 1951, 2098, 2241, 2386, 2400, 2416, 2475, 2487, 2495, 2500, 2540, 2648, 2660, 2718, 2801, 2909, 2923, 2936, 2975, 2988, 3056, 3105, 3154, 3203, 3216, 3307, 3398, 3489, 3580, 3671, 3762, 3763, 3793, 3829, 3961, 4089, 4220, 4237, 4282, 4430, 4563, 4644, 4665, 4813, 4946, 5024, 5045, 5193, 5326, 5404, 5418, 5434, 5491, 5503, 5513, 5517, 5518, 5531, 5572, 5695, 5728, 5730, 5731, 5766, 5800, 5801, 5804]), Base.JuliaSyntax.Diagnostic[Base.JuliaSyntax.Diagnostic(469, 468, :error, "Expected `end`"), Base.JuliaSyntax.Diagnostic(469, 468, :error, "Expected `end`"), Base.JuliaSyntax.Diagnostic(469, 472, :error, "extra tokens after end of expression"), Base.JuliaSyntax.Diagnostic(5513, 5515, :error, "invalid identifier"), Base.JuliaSyntax.Diagnostic(5801, 5803, :error, "invalid identifier")], :none)), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x00007f0e6a2d68c7, Ptr{Nothing} @0x00007f0e6a2e6364, Ptr{Nothing} @0x00007f0e6a2e5e2c, Ptr{Nothing} @0x00007f0e6a2e6f97, Ptr{Nothing} @0x00007f0e6a2e7b3d, Base.InterpreterIP in top-level CodeInfo for Revise at statement 0])
└ @ Revise /home/codespace/.julia/packages/Revise/PSzoa/src/packagedef.jl:743
┌ Error: 2025-09-07 15:33:16 Failed to revise /workspaces/discrete-time-stochastic-epidemiological-model/app.jl
│   exception = (Base.Meta.ParseError("ParseError:\n# Error @ /workspaces/discrete-time-stochastic-epidemiological-model/app.jl:19:22\n    @out S0_discrete = 990\n    @out I0_discrete ) 10\n#                    └ ── Expected `end`", Base.JuliaSyntax.ParseError(Base.JuliaSyntax.SourceFile("module App\n\ninclude(\"lib/DiscreteTimeSIModel.jl\")  \nusing Turing, MCMCChains, GenieFramework, PlotlyBase, StippleLatex, StatsPlots, Random, Distributions, Statistics\nusing .DiscreteTimeSIModel\nRandom.seed!(14)\n\n@genietools\n\n@app begin\n    # Define reactive variables \n    @in beta = 0.52\n    @in gamma = 0.24\n    # @in noise_level = 0.3  \n    # @in S0_discrete = 990\n    # @in I0_discrete = 10\n    # @in R0_discrete = 0\n    @out S0_discrete = 990\n    @out I0_discrete ) 10\n    @out R0_discrete = 0\n    @out time_steps = 100\n    @in delta_t = 0.1\n    @in n_realizations = 50\n\n    # Plot for ODE solutions\n    @out solplot = []  \n    @out solplot_layout = PlotlyBase.Layout(\n        title=\"SI Model Simulation\",\n        xaxis_title=\"Time\",\n        yaxis_title=\"Population\",\n        template=\"plotly_white\"\n    )\n    \n    # Stochastic discrete model plots\n    @out stochastic_plot = []\n    @out stochastic_plot_layout = PlotlyBase.Layout(\n        title=\"Stochastic Discrete SIR Model\",\n        xaxis_title=\"Time Steps\",\n        yaxis_title=\"Population\",\n        template=\"plotly_white\"\n    )\n    \n    @out ensemble_plot = []\n    @out ensemble_plot_layout = PlotlyBase.Layout(\n        title=\"Stochastic SIR Model Ensemble (Multiple Realizations)\",\n        xaxis_title=\"Time Steps\", \n        yaxis_title=\"Population\",\n        template=\"plotly_white\"\n    )\n    \n    @out data_plot = []\n    @out data_plot_layout = PlotlyBase.Layout(\n        title=\"Synthetic Data\",\n        xaxis_title=\"Time\",\n        yaxis_title=\"Population\",\n        template=\"plotly_white\"\n    )\n  \n\n    \n    @onchange beta, gamma, time_steps, delta_t begin\n        try\n            # Single realization of stochastic model\n            S_stoch, I_stoch, R_stoch = simulate_SIR_discrete_stochastic(\n                S0_discrete, I0_discrete, R0_discrete, beta, gamma, time_steps; Δt=delta_t\n            )\n            \n            time_points = 0:time_steps\n            stochastic_plot = [\n                PlotlyBase.scatter(x=time_points, y=S_stoch, mode=\"lines+markers\", name=\"Susceptible (Stochastic)\", line=Dict(\"color\" => \"blue\")),\n                PlotlyBase.scatter(x=time_points, y=I_stoch, mode=\"lines+markers\", name=\"Infected (Stochastic)\", line=Dict(\"color\" => \"red\")),\n                PlotlyBase.scatter(x=time_points, y=R_stoch, mode=\"lines+markers\", name=\"Recovered (Stochastic)\", line=Dict(\"color\" => \"green\"))\n            ]\n        catch e\n            println(\"Error in stochastic simulation: \", e)\n        end\n    end\n    \n    # Stochastic ensemble visualization\n    @onchange n_realizations, beta, gamma, S0_discrete, I0_discrete, R0_discrete, time_steps, delta_t begin\n        try\n            # Multiple realizations for ensemble analysis\n            S_ensemble, I_ensemble, R_ensemble = simulate_SIR_stochastic_ensemble(\n                S0_discrete, I0_discrete, R0_discrete, beta, gamma, time_steps, n_realizations; Δt=delta_t\n            )\n            \n            time_points = 0:time_steps\n            \n            # Calculate mean and percentiles for uncertainty bounds\n            S_mean = mean(S_ensemble, dims=2)[:]\n            I_mean = mean(I_ensemble, dims=2)[:]\n            R_mean = mean(R_ensemble, dims=2)[:]\n            \n            S_lower = [quantile(S_ensemble[i,:], 0.05) for i in 1:eachindex(S_ensemble,1)]\n            S_upper = [quantile(S_ensemble[i,:], 0.95) for i in 1:eachindex(S_ensemble,1)]\n            I_lower = [quantile(I_ensemble[i,:], 0.05) for i in 1:eachindex(I_ensemble,1)]\n            I_upper = [quantile(I_ensemble[i,:], 0.95) for i in 1:eachindex(I_ensemble,1)]\n            R_lower = [quantile(R_ensemble[i,:], 0.05) for i in 1:eachindex(R_ensemble,1)]\n            R_upper = [quantile(R_ensemble[i,:], 0.95) for i in 1:eachindex(R_ensemble,1)]\n\n            ensemble_plot = [\n                # Mean trajectories\n                PlotlyBase.scatter(x=time_points, y=S_mean, mode=\"lines\", name=\"Susceptible (Mean)\", line=Dict(\"color\" => \"blue\")),\n                PlotlyBase.scatter(x=time_points, y=I_mean, mode=\"lines\", name=\"Infected (Mean)\", line=Dict(\"color\" => \"red\")),\n                PlotlyBase.scatter(x=time_points, y=R_mean, mode=\"lines\", name=\"Recovered (Mean)\", line=Dict(\"color\" => \"green\")),\n                \n                # Uncertainty bands (90% CI)\n                PlotlyBase.scatter(x=time_points, y=S_upper, fill=\"none\", mode=\"lines\", line=Dict(\"color\" => \"rgba(0,0,255,0)\"), showlegend=false),\n                PlotlyBase.scatter(x=time_points, y=S_lower, fill=\"tonexty\", mode=\"lines\", line=Dict(\"color\" => \"rgba(0,0,255,0)\"), \n                    fillcolor=\"rgba(0,0,255,0.2)\", name=\"Susceptible (90% CI)\"),\n                    \n                PlotlyBase.scatter(x=time_points, y=I_upper, fill=\"none\", mode=\"lines\", line=Dict(\"color\" => \"rgba(255,0,0,0)\"), showlegend=false),\n                PlotlyBase.scatter(x=time_points, y=I_lower, fill=\"tonexty\", mode=\"lines\", line=Dict(\"color\" => \"rgba(255,0,0,0)\"), \n                    fillcolor=\"rgba(255,0,0,0.2)\", name=\"Infected (90% CI)\"),\n                    \n                PlotlyBase.scatter(x=time_points, y=R_upper, fill=\"none\", mode=\"lines\", line=Dict(\"color\" => \"rgba(0,255,0,0)\"), showlegend=false),\n                PlotlyBase.scatter(x=time_points, y=R_lower, fill=\"tonexty\", mode=\"lines\", line=Dict(\"color\" => \"rgba(0,255,0,0)\"), \n                    fillcolor=\"rgba(0,255,0,0.2)\", name=\"Recovered (90% CI)\")\n            ]\n        catch e\n            println(\"Error in ensemble simulation: \", e)\n        end\n    end  \nend\n\nmeta = Dict(\n    \"og:title\" => \"SI Model Simulation\",\n    \"og:description\" => \"Real-time simulation of an SI epidemic model with adjustable parameters and Bayesian inference.\",\n    \"og:image\" => \"/preview.jpg\"\n)\n\nlayout = DEFAULT_LAYOUT(meta=meta)\n@page(\"/\", \"app.jl.html\", layout)\n\nend", 0, "/workspaces/discrete-time-stochastic-epidemiological-model/app.jl", 1, [1, 12, 13, 53, 167, 194, 211, 212, 224, 225, 236, 269, 289, 310, 340, 368, 395, 421, 448, 474, 499, 525, 547, 575, 576, 605, 629, 674, 711, 739, 773, 805, 811, 816, 854, 884, 937, 984, 1018, 1052, 1084, 1090, 1095, 1123, 1174, 1245, 1280, 1314, 1346, 1352, 1357, 1381, 1428, 1460, 1488, 1522, 1554, 1560, 1563, 1564, 1569, 1622, 1634, 1687, 1761, 1853, 1867, 1880, 1919, 1951, 2098, 2241, 2386, 2400, 2416, 2475, 2487, 2495, 2500, 2540, 2648, 2660, 2718, 2801, 2909, 2923, 2936, 2975, 2988, 3056, 3105, 3154, 3203, 3216, 3307, 3398, 3489, 3580, 3671, 3762, 3763, 3793, 3829, 3961, 4089, 4220, 4237, 4282, 4430, 4563, 4644, 4665, 4813, 4946, 5024, 5045, 5193, 5326, 5404, 5418, 5434, 5491, 5503, 5513, 5517, 5518, 5531, 5572, 5695, 5728, 5730, 5731, 5766, 5800, 5801, 5804]), Base.JuliaSyntax.Diagnostic[Base.JuliaSyntax.Diagnostic(469, 468, :error, "Expected `end`"), Base.JuliaSyntax.Diagnostic(469, 468, :error, "Expected `end`"), Base.JuliaSyntax.Diagnostic(469, 472, :error, "extra tokens after end of expression"), Base.JuliaSyntax.Diagnostic(5513, 5515, :error, "invalid identifier"), Base.JuliaSyntax.Diagnostic(5801, 5803, :error, "invalid identifier")], :none)), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x00007f0e6a2d68c7, Ptr{Nothing} @0x00007f0e6a2e6364, Ptr{Nothing} @0x00007f0e6a2e5e2c, Ptr{Nothing} @0x00007f0e6a2e6f97, Ptr{Nothing} @0x00007f0e6a2e7b3d, Base.InterpreterIP in top-level CodeInfo for Revise at statement 0])
└ @ Revise /home/codespace/.julia/packages/Revise/PSzoa/src/packagedef.jl:743
┌ Error: 2025-09-07 15:33:46 Failed to revise /workspaces/discrete-time-stochastic-epidemiological-model/app.jl
│   exception = (Base.Meta.ParseError("ParseError:\n# Error @ /workspaces/discrete-time-stochastic-epidemiological-model/app.jl:19:22\n    @out S0_discrete = 990\n    @out I0_discrete ) 10\n#                    └ ── Expected `end`", Base.JuliaSyntax.ParseError(Base.JuliaSyntax.SourceFile("module App\n\ninclude(\"lib/DiscreteTimeSIModel.jl\")  \nusing Turing, MCMCChains, GenieFramework, PlotlyBase, StippleLatex, StatsPlots, Random, Distributions, Statistics\nusing .DiscreteTimeSIModel\nRandom.seed!(14)\n\n@genietools\n\n@app begin\n    # Define reactive variables \n    @in beta = 0.52\n    @in gamma = 0.24\n    # @in noise_level = 0.3  \n    # @in S0_discrete = 990\n    # @in I0_discrete = 10\n    # @in R0_discrete = 0\n    @out S0_discrete = 990\n    @out I0_discrete ) 10\n    @out R0_discrete = 0\n    @out time_steps = 100\n    @in delta_t = 0.1\n    @in n_realizations = 50\n\n    # Plot for ODE solutions\n    @out solplot = []  \n    @out solplot_layout = PlotlyBase.Layout(\n        title=\"SI Model Simulation\",\n        xaxis_title=\"Time\",\n        yaxis_title=\"Population\",\n        template=\"plotly_white\"\n    )\n    \n    # Stochastic discrete model plots\n    @out stochastic_plot = []\n    @out stochastic_plot_layout = PlotlyBase.Layout(\n        title=\"Stochastic Discrete SIR Model\",\n        xaxis_title=\"Time Steps\",\n        yaxis_title=\"Population\",\n        template=\"plotly_white\"\n    )\n    \n    @out ensemble_plot = []\n    @out ensemble_plot_layout = PlotlyBase.Layout(\n        title=\"Stochastic SIR Model Ensemble (Multiple Realizations)\",\n        xaxis_title=\"Time Steps\", \n        yaxis_title=\"Population\",\n        template=\"plotly_white\"\n    )\n  \n\n    \n    @onchange beta, gamma begin\n        try\n            # Single realization of stochastic model\n            S_stoch, I_stoch, R_stoch = simulate_SIR_discrete_stochastic(\n                S0_discrete, I0_discrete, R0_discrete, beta, gamma, time_steps; Δt=delta_t\n            )\n            \n            time_points = 0:time_steps\n            stochastic_plot = [\n                PlotlyBase.scatter(x=time_points, y=S_stoch, mode=\"lines+markers\", name=\"Susceptible (Stochastic)\", line=Dict(\"color\" => \"blue\")),\n                PlotlyBase.scatter(x=time_points, y=I_stoch, mode=\"lines+markers\", name=\"Infected (Stochastic)\", line=Dict(\"color\" => \"red\")),\n                PlotlyBase.scatter(x=time_points, y=R_stoch, mode=\"lines+markers\", name=\"Recovered (Stochastic)\", line=Dict(\"color\" => \"green\"))\n            ]\n        catch e\n            println(\"Error in stochastic simulation: \", e)\n        end\n    end\n    \n    # Stochastic ensemble visualization\n    @onchange n_realizations, beta, gamma, S0_discrete, I0_discrete, R0_discrete, time_steps, delta_t begin\n        try\n            # Multiple realizations for ensemble analysis\n            S_ensemble, I_ensemble, R_ensemble = simulate_SIR_stochastic_ensemble(\n                S0_discrete, I0_discrete, R0_discrete, beta, gamma, time_steps, n_realizations; Δt=delta_t\n            )\n            \n            time_points = 0:time_steps\n            \n            # Calculate mean and percentiles for uncertainty bounds\n            S_mean = mean(S_ensemble, dims=2)[:]\n            I_mean = mean(I_ensemble, dims=2)[:]\n            R_mean = mean(R_ensemble, dims=2)[:]\n            \n            S_lower = [quantile(S_ensemble[i,:], 0.05) for i in 1:eachindex(S_ensemble,1)]\n            S_upper = [quantile(S_ensemble[i,:], 0.95) for i in 1:eachindex(S_ensemble,1)]\n            I_lower = [quantile(I_ensemble[i,:], 0.05) for i in 1:eachindex(I_ensemble,1)]\n            I_upper = [quantile(I_ensemble[i,:], 0.95) for i in 1:eachindex(I_ensemble,1)]\n            R_lower = [quantile(R_ensemble[i,:], 0.05) for i in 1:eachindex(R_ensemble,1)]\n            R_upper = [quantile(R_ensemble[i,:], 0.95) for i in 1:eachindex(R_ensemble,1)]\n\n            ensemble_plot = [\n                # Mean trajectories\n                PlotlyBase.scatter(x=time_points, y=S_mean, mode=\"lines\", name=\"Susceptible (Mean)\", line=Dict(\"color\" => \"blue\")),\n                PlotlyBase.scatter(x=time_points, y=I_mean, mode=\"lines\", name=\"Infected (Mean)\", line=Dict(\"color\" => \"red\")),\n                PlotlyBase.scatter(x=time_points, y=R_mean, mode=\"lines\", name=\"Recovered (Mean)\", line=Dict(\"color\" => \"green\")),\n                \n                # Uncertainty bands (90% CI)\n                PlotlyBase.scatter(x=time_points, y=S_upper, fill=\"none\", mode=\"lines\", line=Dict(\"color\" => \"rgba(0,0,255,0)\"), showlegend=false),\n                PlotlyBase.scatter(x=time_points, y=S_lower, fill=\"tonexty\", mode=\"lines\", line=Dict(\"color\" => \"rgba(0,0,255,0)\"), \n                    fillcolor=\"rgba(0,0,255,0.2)\", name=\"Susceptible (90% CI)\"),\n                    \n                PlotlyBase.scatter(x=time_points, y=I_upper, fill=\"none\", mode=\"lines\", line=Dict(\"color\" => \"rgba(255,0,0,0)\"), showlegend=false),\n                PlotlyBase.scatter(x=time_points, y=I_lower, fill=\"tonexty\", mode=\"lines\", line=Dict(\"color\" => \"rgba(255,0,0,0)\"), \n                    fillcolor=\"rgba(255,0,0,0.2)\", name=\"Infected (90% CI)\"),\n                    \n                PlotlyBase.scatter(x=time_points, y=R_upper, fill=\"none\", mode=\"lines\", line=Dict(\"color\" => \"rgba(0,255,0,0)\"), showlegend=false),\n                PlotlyBase.scatter(x=time_points, y=R_lower, fill=\"tonexty\", mode=\"lines\", line=Dict(\"color\" => \"rgba(0,255,0,0)\"), \n                    fillcolor=\"rgba(0,255,0,0.2)\", name=\"Recovered (90% CI)\")\n            ]\n        catch e\n            println(\"Error in ensemble simulation: \", e)\n        end\n    end  \nend\n\nmeta = Dict(\n    \"og:title\" => \"SI Model Simulation\",\n    \"og:description\" => \"Real-time simulation of an SI epidemic model with adjustable parameters and Bayesian inference.\",\n    \"og:image\" => \"/preview.jpg\"\n)\n\nlayout = DEFAULT_LAYOUT(meta=meta)\n@page(\"/\", \"app.jl.html\", layout)\n\nend", 0, "/workspaces/discrete-time-stochastic-epidemiological-model/app.jl", 1, [1, 12, 13, 53, 167, 194, 211, 212, 224, 225, 236, 269, 289, 310, 340, 368, 395, 421, 448, 474, 499, 525, 547, 575, 576, 605, 629, 674, 711, 739, 773, 805, 811, 816, 854, 884, 937, 984, 1018, 1052, 1084, 1090, 1095, 1123, 1174, 1245, 1280, 1314, 1346, 1352, 1355, 1356, 1361, 1393, 1405, 1458, 1532, 1624, 1638, 1651, 1690, 1722, 1869, 2012, 2157, 2171, 2187, 2246, 2258, 2266, 2271, 2311, 2419, 2431, 2489, 2572, 2680, 2694, 2707, 2746, 2759, 2827, 2876, 2925, 2974, 2987, 3078, 3169, 3260, 3351, 3442, 3533, 3534, 3564, 3600, 3732, 3860, 3991, 4008, 4053, 4201, 4334, 4415, 4436, 4584, 4717, 4795, 4816, 4964, 5097, 5175, 5189, 5205, 5262, 5274, 5284, 5288, 5289, 5302, 5343, 5466, 5499, 5501, 5502, 5537, 5571, 5572, 5575]), Base.JuliaSyntax.Diagnostic[Base.JuliaSyntax.Diagnostic(469, 468, :error, "Expected `end`"), Base.JuliaSyntax.Diagnostic(469, 468, :error, "Expected `end`"), Base.JuliaSyntax.Diagnostic(469, 472, :error, "extra tokens after end of expression"), Base.JuliaSyntax.Diagnostic(5284, 5286, :error, "invalid identifier"), Base.JuliaSyntax.Diagnostic(5572, 5574, :error, "invalid identifier")], :none)), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x00007f0e6a2d68c7, Ptr{Nothing} @0x00007f0e6a2e6364, Ptr{Nothing} @0x00007f0e6a2e5e2c, Ptr{Nothing} @0x00007f0e6a2e6f97, Ptr{Nothing} @0x00007f0e6a2e7b3d, Base.InterpreterIP in top-level CodeInfo for Revise at statement 0])
└ @ Revise /home/codespace/.julia/packages/Revise/PSzoa/src/packagedef.jl:743
┌ Error: 2025-09-07 16:27:00 Failed to revise /workspaces/discrete-time-stochastic-epidemiological-model/app.jl
│   exception = (Base.Meta.ParseError("ParseError:\n# Error @ /workspaces/discrete-time-stochastic-epidemiological-model/app.jl:19:22\n    @out S0_discrete = 990\n    @out I0_discrete ) 10\n#                    └ ── Expected `end`", Base.JuliaSyntax.ParseError(Base.JuliaSyntax.SourceFile("module App\n\ninclude(\"lib/DiscreteTimeSIModel.jl\")  \nusing Turing, MCMCChains, GenieFramework, PlotlyBase, StippleLatex, StatsPlots, Random, Distributions, Statistics\nusing .DiscreteTimeSIModel\nRandom.seed!(14)\n\n@genietools\n\n@app begin\n    # Define reactive variables \n    @in beta = 0.52\n    @in gamma = 0.24\n    # @in noise_level = 0.3  \n    # @in S0_discrete = 990\n    # @in I0_discrete = 10\n    # @in R0_discrete = 0\n    @out S0_discrete = 990\n    @out I0_discrete ) 10\n    @out R0_discrete = 0\n    @out time_steps = 100\n    @in delta_t = 0.1\n    @in n_realizations = 50\n\n    # Plot for ODE solutions\n    @out solplot = []  \n    @out solplot_layout = PlotlyBase.Layout(\n        title=\"SI Model Simulation\",\n        xaxis_title=\"Time\",\n        yaxis_title=\"Population\",\n        template=\"plotly_white\"\n    )\n    \n    # Stochastic discrete model plots\n    @out stochastic_plot = []\n    @out stochastic_plot_layout = PlotlyBase.Layout(\n        title=\"Stochastic Discrete SIR Model\",\n        xaxis_title=\"Time Steps\",\n        yaxis_title=\"Population\",\n        template=\"plotly_white\"\n    )\n    \n    @out ensemble_plot = []\n    @out ensemble_plot_layout = PlotlyBase.Layout(\n        title=\"Stochastic SIR Model Ensemble (Multiple Realizations)\",\n        xaxis_title=\"Time Steps\", \n        yaxis_title=\"Population\",\n        template=\"plotly_white\"\n    )\n  \n\n    \n    @onchange alpha, gamma begin\n        try\n            # Single realization of stochastic model\n            S_stoch, I_stoch, R_stoch = simulate_SIR_discrete_stochastic(\n                S0_discrete, I0_discrete, R0_discrete, alpha, gamma, time_steps; Δt=delta_t\n            )\n            \n            time_points = 0:time_steps\n            stochastic_plot = [\n                PlotlyBase.scatter(x=time_points, y=S_stoch, mode=\"lines+markers\", name=\"Susceptible (Stochastic)\", line=Dict(\"color\" => \"blue\")),\n                PlotlyBase.scatter(x=time_points, y=I_stoch, mode=\"lines+markers\", name=\"Infected (Stochastic)\", line=Dict(\"color\" => \"red\")),\n                PlotlyBase.scatter(x=time_points, y=R_stoch, mode=\"lines+markers\", name=\"Recovered (Stochastic)\", line=Dict(\"color\" => \"green\"))\n            ]\n        catch e\n            println(\"Error in stochastic simulation: \", e)\n        end\n    end\n    \n    # Stochastic ensemble visualization\n    @onchange n_realizations, alpha, gamma, S0_discrete, I0_discrete, R0_discrete, time_steps, delta_t begin\n        try\n            # Multiple realizations for ensemble analysis\n            S_ensemble, I_ensemble, R_ensemble = simulate_SIR_stochastic_ensemble(\n                S0_discrete, I0_discrete, R0_discrete, alpha, gamma, time_steps, n_realizations; Δt=delta_t\n            )\n            \n            time_points = 0:time_steps\n            \n            # Calculate mean and percentiles for uncertainty bounds\n            S_mean = mean(S_ensemble, dims=2)[:]\n            I_mean = mean(I_ensemble, dims=2)[:]\n            R_mean = mean(R_ensemble, dims=2)[:]\n            \n            S_lower = [quantile(S_ensemble[i,:], 0.05) for i in 1:eachindex(S_ensemble,1)]\n            S_upper = [quantile(S_ensemble[i,:], 0.95) for i in 1:eachindex(S_ensemble,1)]\n            I_lower = [quantile(I_ensemble[i,:], 0.05) for i in 1:eachindex(I_ensemble,1)]\n            I_upper = [quantile(I_ensemble[i,:], 0.95) for i in 1:eachindex(I_ensemble,1)]\n            R_lower = [quantile(R_ensemble[i,:], 0.05) for i in 1:eachindex(R_ensemble,1)]\n            R_upper = [quantile(R_ensemble[i,:], 0.95) for i in 1:eachindex(R_ensemble,1)]\n\n            ensemble_plot = [\n                # Mean trajectories\n                PlotlyBase.scatter(x=time_points, y=S_mean, mode=\"lines\", name=\"Susceptible (Mean)\", line=Dict(\"color\" => \"blue\")),\n                PlotlyBase.scatter(x=time_points, y=I_mean, mode=\"lines\", name=\"Infected (Mean)\", line=Dict(\"color\" => \"red\")),\n                PlotlyBase.scatter(x=time_points, y=R_mean, mode=\"lines\", name=\"Recovered (Mean)\", line=Dict(\"color\" => \"green\")),\n                \n                # Uncertainty bands (90% CI)\n                PlotlyBase.scatter(x=time_points, y=S_upper, fill=\"none\", mode=\"lines\", line=Dict(\"color\" => \"rgba(0,0,255,0)\"), showlegend=false),\n                PlotlyBase.scatter(x=time_points, y=S_lower, fill=\"tonexty\", mode=\"lines\", line=Dict(\"color\" => \"rgba(0,0,255,0)\"), \n                    fillcolor=\"rgba(0,0,255,0.2)\", name=\"Susceptible (90% CI)\"),\n                    \n                PlotlyBase.scatter(x=time_points, y=I_upper, fill=\"none\", mode=\"lines\", line=Dict(\"color\" => \"rgba(255,0,0,0)\"), showlegend=false),\n                PlotlyBase.scatter(x=time_points, y=I_lower, fill=\"tonexty\", mode=\"lines\", line=Dict(\"color\" => \"rgba(255,0,0,0)\"), \n                    fillcolor=\"rgba(255,0,0,0.2)\", name=\"Infected (90% CI)\"),\n                    \n                PlotlyBase.scatter(x=time_points, y=R_upper, fill=\"none\", mode=\"lines\", line=Dict(\"color\" => \"rgba(0,255,0,0)\"), showlegend=false),\n                PlotlyBase.scatter(x=time_points, y=R_lower, fill=\"tonexty\", mode=\"lines\", line=Dict(\"color\" => \"rgba(0,255,0,0)\"), \n                    fillcolor=\"rgba(0,255,0,0.2)\", name=\"Recovered (90% CI)\")\n            ]\n        catch e\n            println(\"Error in ensemble simulation: \", e)\n        end\n    end  \nend\n\nmeta = Dict(\n    \"og:title\" => \"SI Model Simulation\",\n    \"og:description\" => \"Real-time simulation of an SI epidemic model with adjustable parameters and Bayesian inference.\",\n    \"og:image\" => \"/preview.jpg\"\n)\n\nlayout = DEFAULT_LAYOUT(meta=meta)\n@page(\"/\", \"app.jl.html\", layout)\n\nend", 0, "/workspaces/discrete-time-stochastic-epidemiological-model/app.jl", 1, [1, 12, 13, 53, 167, 194, 211, 212, 224, 225, 236, 269, 289, 310, 340, 368, 395, 421, 448, 474, 499, 525, 547, 575, 576, 605, 629, 674, 711, 739, 773, 805, 811, 816, 854, 884, 937, 984, 1018, 1052, 1084, 1090, 1095, 1123, 1174, 1245, 1280, 1314, 1346, 1352, 1355, 1356, 1361, 1394, 1406, 1459, 1533, 1626, 1640, 1653, 1692, 1724, 1871, 2014, 2159, 2173, 2189, 2248, 2260, 2268, 2273, 2313, 2422, 2434, 2492, 2575, 2684, 2698, 2711, 2750, 2763, 2831, 2880, 2929, 2978, 2991, 3082, 3173, 3264, 3355, 3446, 3537, 3538, 3568, 3604, 3736, 3864, 3995, 4012, 4057, 4205, 4338, 4419, 4440, 4588, 4721, 4799, 4820, 4968, 5101, 5179, 5193, 5209, 5266, 5278, 5288, 5292, 5293, 5306, 5347, 5470, 5503, 5505, 5506, 5541, 5575, 5576, 5579]), Base.JuliaSyntax.Diagnostic[Base.JuliaSyntax.Diagnostic(469, 468, :error, "Expected `end`"), Base.JuliaSyntax.Diagnostic(469, 468, :error, "Expected `end`"), Base.JuliaSyntax.Diagnostic(469, 472, :error, "extra tokens after end of expression"), Base.JuliaSyntax.Diagnostic(5288, 5290, :error, "invalid identifier"), Base.JuliaSyntax.Diagnostic(5576, 5578, :error, "invalid identifier")], :none)), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x00007f0e6a2d68c7, Ptr{Nothing} @0x00007f0e6a2e6364, Ptr{Nothing} @0x00007f0e6a2e5e2c, Ptr{Nothing} @0x00007f0e6a2e6f97, Ptr{Nothing} @0x00007f0e6a2e7b3d, Base.InterpreterIP in top-level CodeInfo for Revise at statement 0])
└ @ Revise /home/codespace/.julia/packages/Revise/PSzoa/src/packagedef.jl:743
┌ Error: 2025-09-07 16:27:30 Failed to revise /workspaces/discrete-time-stochastic-epidemiological-model/app.jl
│   exception = (Base.Meta.ParseError("ParseError:\n# Error @ /workspaces/discrete-time-stochastic-epidemiological-model/app.jl:19:22\n    @out S0_discrete = 990\n    @out I0_discrete ) 10\n#                    └ ── Expected `end`", Base.JuliaSyntax.ParseError(Base.JuliaSyntax.SourceFile("module App\n\ninclude(\"lib/DiscreteTimeSIModel.jl\")  \nusing Turing, MCMCChains, GenieFramework, PlotlyBase, StippleLatex, StatsPlots, Random, Distributions, Statistics\nusing .DiscreteTimeSIModel\nRandom.seed!(14)\n\n@genietools\n\n@app begin\n    # Define reactive variables \n    @in alpha = 0.52\n    @in gamma = 0.24\n    # @in noise_level = 0.3  \n    # @in S0_discrete = 990\n    # @in I0_discrete = 10\n    # @in R0_discrete = 0\n    @out S0_discrete = 990\n    @out I0_discrete ) 10\n    @out R0_discrete = 0\n    @out time_steps = 100\n    @in delta_t = 0.1\n    @in n_realizations = 50\n\n    # Plot for ODE solutions\n    @out solplot = []  \n    @out solplot_layout = PlotlyBase.Layout(\n        title=\"SI Model Simulation\",\n        xaxis_title=\"Time\",\n        yaxis_title=\"Population\",\n        template=\"plotly_white\"\n    )\n    \n    # Stochastic discrete model plots\n    @out stochastic_plot = []\n    @out stochastic_plot_layout = PlotlyBase.Layout(\n        title=\"Stochastic Discrete SIR Model\",\n        xaxis_title=\"Time Steps\",\n        yaxis_title=\"Population\",\n        template=\"plotly_white\"\n    )\n    \n    @out ensemble_plot = []\n    @out ensemble_plot_layout = PlotlyBase.Layout(\n        title=\"Stochastic SIR Model Ensemble (Multiple Realizations)\",\n        xaxis_title=\"Time Steps\", \n        yaxis_title=\"Population\",\n        template=\"plotly_white\"\n    )\n  \n\n    \n    @onchange alpha, gamma begin\n        try\n            # Single realization of stochastic model\n            S_stoch, I_stoch, R_stoch = simulate_SIR_discrete_stochastic(\n                S0_discrete, I0_discrete, R0_discrete, alpha, gamma, time_steps; Δt=delta_t\n            )\n            \n            time_points = 0:time_steps\n            stochastic_plot = [\n                PlotlyBase.scatter(x=time_points, y=S_stoch, mode=\"lines+markers\", name=\"Susceptible (Stochastic)\", line=Dict(\"color\" => \"blue\")),\n                PlotlyBase.scatter(x=time_points, y=I_stoch, mode=\"lines+markers\", name=\"Infected (Stochastic)\", line=Dict(\"color\" => \"red\")),\n                PlotlyBase.scatter(x=time_points, y=R_stoch, mode=\"lines+markers\", name=\"Recovered (Stochastic)\", line=Dict(\"color\" => \"green\"))\n            ]\n        catch e\n            println(\"Error in stochastic simulation: \", e)\n        end\n    end\n    \n    # Stochastic ensemble visualization\n    @onchange n_realizations, alpha, gamma, S0_discrete, I0_discrete, R0_discrete, time_steps, delta_t begin\n        try\n            # Multiple realizations for ensemble analysis\n            S_ensemble, I_ensemble, R_ensemble = simulate_SIR_stochastic_ensemble(\n                S0_discrete, I0_discrete, R0_discrete, alpha, gamma, time_steps, n_realizations; Δt=delta_t\n            )\n            \n            time_points = 0:time_steps\n            \n            # Calculate mean and percentiles for uncertainty bounds\n            S_mean = mean(S_ensemble, dims=2)[:]\n            I_mean = mean(I_ensemble, dims=2)[:]\n            R_mean = mean(R_ensemble, dims=2)[:]\n            \n            S_lower = [quantile(S_ensemble[i,:], 0.05) for i in 1:eachindex(S_ensemble,1)]\n            S_upper = [quantile(S_ensemble[i,:], 0.95) for i in 1:eachindex(S_ensemble,1)]\n            I_lower = [quantile(I_ensemble[i,:], 0.05) for i in 1:eachindex(I_ensemble,1)]\n            I_upper = [quantile(I_ensemble[i,:], 0.95) for i in 1:eachindex(I_ensemble,1)]\n            R_lower = [quantile(R_ensemble[i,:], 0.05) for i in 1:eachindex(R_ensemble,1)]\n            R_upper = [quantile(R_ensemble[i,:], 0.95) for i in 1:eachindex(R_ensemble,1)]\n\n            ensemble_plot = [\n                # Mean trajectories\n                PlotlyBase.scatter(x=time_points, y=S_mean, mode=\"lines\", name=\"Susceptible (Mean)\", line=Dict(\"color\" => \"blue\")),\n                PlotlyBase.scatter(x=time_points, y=I_mean, mode=\"lines\", name=\"Infected (Mean)\", line=Dict(\"color\" => \"red\")),\n                PlotlyBase.scatter(x=time_points, y=R_mean, mode=\"lines\", name=\"Recovered (Mean)\", line=Dict(\"color\" => \"green\")),\n                \n                # Uncertainty bands (90% CI)\n                PlotlyBase.scatter(x=time_points, y=S_upper, fill=\"none\", mode=\"lines\", line=Dict(\"color\" => \"rgba(0,0,255,0)\"), showlegend=false),\n                PlotlyBase.scatter(x=time_points, y=S_lower, fill=\"tonexty\", mode=\"lines\", line=Dict(\"color\" => \"rgba(0,0,255,0)\"), \n                    fillcolor=\"rgba(0,0,255,0.2)\", name=\"Susceptible (90% CI)\"),\n                    \n                PlotlyBase.scatter(x=time_points, y=I_upper, fill=\"none\", mode=\"lines\", line=Dict(\"color\" => \"rgba(255,0,0,0)\"), showlegend=false),\n                PlotlyBase.scatter(x=time_points, y=I_lower, fill=\"tonexty\", mode=\"lines\", line=Dict(\"color\" => \"rgba(255,0,0,0)\"), \n                    fillcolor=\"rgba(255,0,0,0.2)\", name=\"Infected (90% CI)\"),\n                    \n                PlotlyBase.scatter(x=time_points, y=R_upper, fill=\"none\", mode=\"lines\", line=Dict(\"color\" => \"rgba(0,255,0,0)\"), showlegend=false),\n                PlotlyBase.scatter(x=time_points, y=R_lower, fill=\"tonexty\", mode=\"lines\", line=Dict(\"color\" => \"rgba(0,255,0,0)\"), \n                    fillcolor=\"rgba(0,255,0,0.2)\", name=\"Recovered (90% CI)\")\n            ]\n        catch e\n            println(\"Error in ensemble simulation: \", e)\n        end\n    end  \nend\n\nmeta = Dict(\n    \"og:title\" => \"SI Model Simulation\",\n    \"og:description\" => \"Real-time simulation of an SI epidemic model with adjustable parameters and Bayesian inference.\",\n    \"og:image\" => \"/preview.jpg\"\n)\n\nlayout = DEFAULT_LAYOUT(meta=meta)\n@page(\"/\", \"app.jl.html\", layout)\n\nend", 0, "/workspaces/discrete-time-stochastic-epidemiological-model/app.jl", 1, [1, 12, 13, 53, 167, 194, 211, 212, 224, 225, 236, 269, 290, 311, 341, 369, 396, 422, 449, 475, 500, 526, 548, 576, 577, 606, 630, 675, 712, 740, 774, 806, 812, 817, 855, 885, 938, 985, 1019, 1053, 1085, 1091, 1096, 1124, 1175, 1246, 1281, 1315, 1347, 1353, 1356, 1357, 1362, 1395, 1407, 1460, 1534, 1627, 1641, 1654, 1693, 1725, 1872, 2015, 2160, 2174, 2190, 2249, 2261, 2269, 2274, 2314, 2423, 2435, 2493, 2576, 2685, 2699, 2712, 2751, 2764, 2832, 2881, 2930, 2979, 2992, 3083, 3174, 3265, 3356, 3447, 3538, 3539, 3569, 3605, 3737, 3865, 3996, 4013, 4058, 4206, 4339, 4420, 4441, 4589, 4722, 4800, 4821, 4969, 5102, 5180, 5194, 5210, 5267, 5279, 5289, 5293, 5294, 5307, 5348, 5471, 5504, 5506, 5507, 5542, 5576, 5577, 5580]), Base.JuliaSyntax.Diagnostic[Base.JuliaSyntax.Diagnostic(470, 469, :error, "Expected `end`"), Base.JuliaSyntax.Diagnostic(470, 469, :error, "Expected `end`"), Base.JuliaSyntax.Diagnostic(470, 473, :error, "extra tokens after end of expression"), Base.JuliaSyntax.Diagnostic(5289, 5291, :error, "invalid identifier"), Base.JuliaSyntax.Diagnostic(5577, 5579, :error, "invalid identifier")], :none)), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x00007f0e6a2d68c7, Ptr{Nothing} @0x00007f0e6a2e6364, Ptr{Nothing} @0x00007f0e6a2e5e2c, Ptr{Nothing} @0x00007f0e6a2e6f97, Ptr{Nothing} @0x00007f0e6a2e7b3d, Base.InterpreterIP in top-level CodeInfo for Revise at statement 0])
└ @ Revise /home/codespace/.julia/packages/Revise/PSzoa/src/packagedef.jl:743
┌ Info: 2025-09-07 16:31:59 Watching ["/workspaces/discrete-time-stochastic-epidemiological-model"]
└ @ GenieAutoReload /home/codespace/.julia/packages/GenieAutoReload/qpImd/src/GenieAutoReload.jl:19
┌ Info: 2025-09-07 16:32:01 Autoreloading
└ @ GenieAutoReload /home/codespace/.julia/packages/GenieAutoReload/qpImd/src/GenieAutoReload.jl:22
┌ Info: 2025-09-07 16:32:34 
│ Web Server starting at http://127.0.0.1:8000 
└ @ Genie.Server /home/codespace/.julia/packages/Genie/y1eGj/src/Server.jl:182
┌ Info: 2025-09-07 16:32:34 Listening on: 127.0.0.1:8000, thread id: 1
└ @ HTTP.Servers /home/codespace/.julia/packages/HTTP/JcAHX/src/Servers.jl:382
┌ Warning: 2025-09-07 16:32:49 UndefVarError(:plotly, Main.App)
└ @ Genie.Renderer.Html /home/codespace/.julia/packages/Genie/y1eGj/src/renderers/Html.jl:154
┌ Warning: 2025-09-07 16:32:49 UndefVarError(:plotly, Main.App)
└ @ Genie.Renderer.Html /home/codespace/.julia/packages/Genie/y1eGj/src/renderers/Html.jl:154
┌ Info: 2025-09-07 16:32:51 Calling finalizers
└ @ Stipple /home/codespace/.julia/packages/Stipple/HO9IP/src/Stipple.jl:540
┌ Info: 2025-09-07 16:34:10 Calling finalizers
└ @ Stipple /home/codespace/.julia/packages/Stipple/HO9IP/src/Stipple.jl:540
┌ Info: 2025-09-07 16:35:00 Autoreloading
└ @ GenieAutoReload /home/codespace/.julia/packages/GenieAutoReload/qpImd/src/GenieAutoReload.jl:22
┌ Info: 2025-09-07 16:35:00 Calling finalizers
└ @ Stipple /home/codespace/.julia/packages/Stipple/HO9IP/src/Stipple.jl:540
┌ Info: 2025-09-07 16:48:45 Watching ["/workspaces/discrete-time-stochastic-epidemiological-model"]
└ @ GenieAutoReload /home/codespace/.julia/packages/GenieAutoReload/qpImd/src/GenieAutoReload.jl:19
┌ Info: 2025-09-07 16:48:47 Autoreloading
└ @ GenieAutoReload /home/codespace/.julia/packages/GenieAutoReload/qpImd/src/GenieAutoReload.jl:22
┌ Info: 2025-09-07 16:49:51 Autoreloading
└ @ GenieAutoReload /home/codespace/.julia/packages/GenieAutoReload/qpImd/src/GenieAutoReload.jl:22
┌ Info: 2025-09-07 16:49:55 Autoreloading
└ @ GenieAutoReload /home/codespace/.julia/packages/GenieAutoReload/qpImd/src/GenieAutoReload.jl:22
┌ Info: 2025-09-07 16:50:36 Autoreloading
└ @ GenieAutoReload /home/codespace/.julia/packages/GenieAutoReload/qpImd/src/GenieAutoReload.jl:22
┌ Info: 2025-09-07 16:51:34 Autoreloading
└ @ GenieAutoReload /home/codespace/.julia/packages/GenieAutoReload/qpImd/src/GenieAutoReload.jl:22
┌ Info: 2025-09-07 16:51:37 Autoreloading
└ @ GenieAutoReload /home/codespace/.julia/packages/GenieAutoReload/qpImd/src/GenieAutoReload.jl:22
┌ Info: 2025-09-07 16:51:52 Autoreloading
└ @ GenieAutoReload /home/codespace/.julia/packages/GenieAutoReload/qpImd/src/GenieAutoReload.jl:22
┌ Info: 2025-09-07 16:52:04 Autoreloading
└ @ GenieAutoReload /home/codespace/.julia/packages/GenieAutoReload/qpImd/src/GenieAutoReload.jl:22
┌ Info: 2025-09-07 16:52:10 Autoreloading
└ @ GenieAutoReload /home/codespace/.julia/packages/GenieAutoReload/qpImd/src/GenieAutoReload.jl:22
┌ Info: 2025-09-07 16:52:23 Autoreloading
└ @ GenieAutoReload /home/codespace/.julia/packages/GenieAutoReload/qpImd/src/GenieAutoReload.jl:22
┌ Info: 2025-09-07 16:53:08 
│ Web Server starting at http://127.0.0.1:8000 
└ @ Genie.Server /home/codespace/.julia/packages/Genie/y1eGj/src/Server.jl:182
┌ Info: 2025-09-07 16:53:08 Listening on: 127.0.0.1:8000, thread id: 1
└ @ HTTP.Servers /home/codespace/.julia/packages/HTTP/JcAHX/src/Servers.jl:382
┌ Warning: 2025-09-07 16:53:24 UndefVarError(:plotly, Main.App)
└ @ Genie.Renderer.Html /home/codespace/.julia/packages/Genie/y1eGj/src/renderers/Html.jl:154
┌ Info: 2025-09-07 16:54:00 Calling finalizers
└ @ Stipple /home/codespace/.julia/packages/Stipple/HO9IP/src/Stipple.jl:540
┌ Error: 2025-09-07 16:55:34 Failed to revise /workspaces/discrete-time-stochastic-epidemiological-model/app.jl
│   exception = (Base.Meta.ParseError("ParseError:\n# Error @ /workspaces/discrete-time-stochastic-epidemiological-model/app.jl:4:64\ninclude(\"lib/DiscreteTimeSIModel.jl\")  \n#                                                              ┌──────────────────────────────────────────────────────────\nusing Turing, MCMCChains, GenieFramework, PlotlyBase, PlotlyJS StippleLatex, StatsPlots, Random, Distributions, Statistics\nusing .DiscreteTimeSIModel\nRandom.seed!(14)\n#─────────────┘ ── Expected `end`", Base.JuliaSyntax.ParseError(Base.JuliaSyntax.SourceFile("module App\n\ninclude(\"lib/DiscreteTimeSIModel.jl\")  \nusing Turing, MCMCChains, GenieFramework, PlotlyBase, PlotlyJS StippleLatex, StatsPlots, Random, Distributions, Statistics\nusing .DiscreteTimeSIModel\nRandom.seed!(14)\n\n@genietools\n\n@app begin\n    # Define reactive variables \n    @in alpha = 0.52\n    @in gamma = 0.24\n    # @in noise_level = 0.3  \n    # @in S0_discrete = 990\n    # @in I0_discrete = 10\n    # @in R0_discrete = 0\n    @out S0_discrete = 990\n    @out I0_discrete = 10\n    @out R0_discrete = 0\n    @out time_steps = 100\n    @in delta_t = 0.1\n    @in n_realizations = 50\n\n    # Plot for ODE solutions\n    @out solplot = []  \n    @out solplot_layout = PlotlyBase.Layout(\n        title=\"SI Model Simulation\",\n        xaxis_title=\"Time\",\n        yaxis_title=\"Population\",\n        template=\"plotly_white\"\n    )\n    \n    # Stochastic discrete model plots\n    @out stochastic_plot = []\n    @out stochastic_plot_layout = PlotlyBase.Layout(\n        title=\"Stochastic Discrete SIR Model\",\n        xaxis_title=\"Time Steps\",\n        yaxis_title=\"Population\",\n        template=\"plotly_white\"\n    )\n    \n    @out ensemble_plot = []\n    @out ensemble_plot_layout = PlotlyBase.Layout(\n        title=\"Stochastic SIR Model Ensemble (Multiple Realizations)\",\n        xaxis_title=\"Time Steps\", \n        yaxis_title=\"Population\",\n        template=\"plotly_white\"\n    )\n  \n\n    \n    @onchange alpha, gamma begin\n        try\n            # Single realization of stochastic model\n            S_stoch, I_stoch, R_stoch = simulate_SIR_discrete_stochastic(\n                S0_discrete, I0_discrete, R0_discrete, alpha, gamma, time_steps; Δt=delta_t\n            )\n            \n            time_points = 0:time_steps\n            stochastic_plot = [\n                PlotlyBase.scatter(x=time_points, y=S_stoch, mode=\"lines+markers\", name=\"Susceptible (Stochastic)\", line=Dict(\"color\" => \"blue\")),\n                PlotlyBase.scatter(x=time_points, y=I_stoch, mode=\"lines+markers\", name=\"Infected (Stochastic)\", line=Dict(\"color\" => \"red\")),\n                PlotlyBase.scatter(x=time_points, y=R_stoch, mode=\"lines+markers\", name=\"Recovered (Stochastic)\", line=Dict(\"color\" => \"green\"))\n            ]\n        catch e\n            println(\"Error in stochastic simulation: \", e)\n        end\n    end\n    \n    # Stochastic ensemble visualization\n    @onchange n_realizations, alpha, gamma, S0_discrete, I0_discrete, R0_discrete, time_steps, delta_t begin\n        try\n            # Multiple realizations for ensemble analysis\n            S_ensemble, I_ensemble, R_ensemble = simulate_SIR_stochastic_ensemble(\n                S0_discrete, I0_discrete, R0_discrete, alpha, gamma, time_steps, n_realizations; Δt=delta_t\n            )\n            \n            time_points = 0:time_steps\n            \n            # Calculate mean and percentiles for uncertainty bounds\n            S_mean = mean(S_ensemble, dims=2)[:]\n            I_mean = mean(I_ensemble, dims=2)[:]\n            R_mean = mean(R_ensemble, dims=2)[:]\n            \n            S_lower = [quantile(S_ensemble[i,:], 0.05) for i in 1:eachindex(S_ensemble,1)]\n            S_upper = [quantile(S_ensemble[i,:], 0.95) for i in 1:eachindex(S_ensemble,1)]\n            I_lower = [quantile(I_ensemble[i,:], 0.05) for i in 1:eachindex(I_ensemble,1)]\n            I_upper = [quantile(I_ensemble[i,:], 0.95) for i in 1:eachindex(I_ensemble,1)]\n            R_lower = [quantile(R_ensemble[i,:], 0.05) for i in 1:eachindex(R_ensemble,1)]\n            R_upper = [quantile(R_ensemble[i,:], 0.95) for i in 1:eachindex(R_ensemble,1)]\n\n            ensemble_plot = [\n                # Mean trajectories\n                PlotlyBase.scatter(x=time_points, y=S_mean, mode=\"lines\", name=\"Susceptible (Mean)\", line=Dict(\"color\" => \"blue\")),\n                PlotlyBase.scatter(x=time_points, y=I_mean, mode=\"lines\", name=\"Infected (Mean)\", line=Dict(\"color\" => \"red\")),\n                PlotlyBase.scatter(x=time_points, y=R_mean, mode=\"lines\", name=\"Recovered (Mean)\", line=Dict(\"color\" => \"green\")),\n                \n                # Uncertainty bands (90% CI)\n                PlotlyBase.scatter(x=time_points, y=S_upper, fill=\"none\", mode=\"lines\", line=Dict(\"color\" => \"rgba(0,0,255,0)\"), showlegend=false),\n                PlotlyBase.scatter(x=time_points, y=S_lower, fill=\"tonexty\", mode=\"lines\", line=Dict(\"color\" => \"rgba(0,0,255,0)\"), \n                    fillcolor=\"rgba(0,0,255,0.2)\", name=\"Susceptible (90% CI)\"),\n                    \n                PlotlyBase.scatter(x=time_points, y=I_upper, fill=\"none\", mode=\"lines\", line=Dict(\"color\" => \"rgba(255,0,0,0)\"), showlegend=false),\n                PlotlyBase.scatter(x=time_points, y=I_lower, fill=\"tonexty\", mode=\"lines\", line=Dict(\"color\" => \"rgba(255,0,0,0)\"), \n                    fillcolor=\"rgba(255,0,0,0.2)\", name=\"Infected (90% CI)\"),\n                    \n                PlotlyBase.scatter(x=time_points, y=R_upper, fill=\"none\", mode=\"lines\", line=Dict(\"color\" => \"rgba(0,255,0,0)\"), showlegend=false),\n                PlotlyBase.scatter(x=time_points, y=R_lower, fill=\"tonexty\", mode=\"lines\", line=Dict(\"color\" => \"rgba(0,255,0,0)\"), \n                    fillcolor=\"rgba(0,255,0,0.2)\", name=\"Recovered (90% CI)\")\n            ]\n        catch e\n            println(\"Error in ensemble simulation: \", e)\n        end\n    end  \nend\n\nmeta = Dict(\n    \"og:title\" => \"SI Model Simulation\",\n    \"og:description\" => \"Real-time simulation of an SI epidemic model with adjustable parameters and Bayesian inference.\",\n    \"og:image\" => \"/preview.jpg\"\n)\n\nlayout = DEFAULT_LAYOUT(meta=meta)\n@page(\"/\", \"app.jl.html\", layout)\n\nend", 0, "/workspaces/discrete-time-stochastic-epidemiological-model/app.jl", 1, [1, 12, 13, 53, 176, 203, 220, 221, 233, 234, 245, 278, 299, 320, 350, 378, 405, 431, 458, 484, 509, 535, 557, 585, 586, 615, 639, 684, 721, 749, 783, 815, 821, 826, 864, 894, 947, 994, 1028, 1062, 1094, 1100, 1105, 1133, 1184, 1255, 1290, 1324, 1356, 1362, 1365, 1366, 1371, 1404, 1416, 1469, 1543, 1636, 1650, 1663, 1702, 1734, 1881, 2024, 2169, 2183, 2199, 2258, 2270, 2278, 2283, 2323, 2432, 2444, 2502, 2585, 2694, 2708, 2721, 2760, 2773, 2841, 2890, 2939, 2988, 3001, 3092, 3183, 3274, 3365, 3456, 3547, 3548, 3578, 3614, 3746, 3874, 4005, 4022, 4067, 4215, 4348, 4429, 4450, 4598, 4731, 4809, 4830, 4978, 5111, 5189, 5203, 5219, 5276, 5288, 5298, 5302, 5303, 5316, 5357, 5480, 5513, 5515, 5516, 5551, 5585, 5586, 5589]), Base.JuliaSyntax.Diagnostic[Base.JuliaSyntax.Diagnostic(116, 217, :error, "Expected `end`"), Base.JuliaSyntax.Diagnostic(218, 218, :error, "extra tokens after end of expression"), Base.JuliaSyntax.Diagnostic(5586, 5588, :error, "invalid identifier")], :none)), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000783b65bbf8c7, Ptr{Nothing} @0x0000783b65bcf364, Ptr{Nothing} @0x0000783b65bcee2c, Ptr{Nothing} @0x0000783b65bcff97, Ptr{Nothing} @0x0000783b65bd0b3d, Base.InterpreterIP in top-level CodeInfo for Revise at statement 0])
└ @ Revise /home/codespace/.julia/packages/Revise/PSzoa/src/packagedef.jl:743
┌ Warning: 2025-09-07 16:55:35 The running code does not match the saved version for the following files:
│ 
│   /workspaces/discrete-time-stochastic-epidemiological-model/app.jl
│ 
│ If the error was due to evaluation order, it can sometimes be resolved by calling `Revise.retry()`.
│ Use Revise.errors() to report errors again. Only the first error in each file is shown.
│ Your prompt color may be yellow until the errors are resolved.
└ @ Revise /home/codespace/.julia/packages/Revise/PSzoa/src/packagedef.jl:859
┌ Info: 2025-09-07 16:55:44 Calling finalizers
└ @ Stipple /home/codespace/.julia/packages/Stipple/HO9IP/src/Stipple.jl:540
┌ Info: 2025-09-07 16:57:56 Calling finalizers
└ @ Stipple /home/codespace/.julia/packages/Stipple/HO9IP/src/Stipple.jl:540
┌ Info: 2025-09-07 16:59:13 Calling finalizers
└ @ Stipple /home/codespace/.julia/packages/Stipple/HO9IP/src/Stipple.jl:540
┌ Info: 2025-09-07 17:01:21 Calling finalizers
└ @ Stipple /home/codespace/.julia/packages/Stipple/HO9IP/src/Stipple.jl:540
┌ Info: 2025-09-07 17:06:19 Watching ["/workspaces/discrete-time-stochastic-epidemiological-model"]
└ @ GenieAutoReload /home/codespace/.julia/packages/GenieAutoReload/qpImd/src/GenieAutoReload.jl:19
┌ Info: 2025-09-07 17:06:21 Autoreloading
└ @ GenieAutoReload /home/codespace/.julia/packages/GenieAutoReload/qpImd/src/GenieAutoReload.jl:22
┌ Info: 2025-09-07 17:07:08 
│ Web Server starting at http://127.0.0.1:8000 
└ @ Genie.Server /home/codespace/.julia/packages/Genie/y1eGj/src/Server.jl:182
┌ Info: 2025-09-07 17:07:08 Listening on: 127.0.0.1:8000, thread id: 1
└ @ HTTP.Servers /home/codespace/.julia/packages/HTTP/JcAHX/src/Servers.jl:382
┌ Warning: 2025-09-07 17:07:23 UndefVarError(:plotly, Main.App)
└ @ Genie.Renderer.Html /home/codespace/.julia/packages/Genie/y1eGj/src/renderers/Html.jl:154
┌ Info: 2025-09-07 17:07:35 Calling finalizers
└ @ Stipple /home/codespace/.julia/packages/Stipple/HO9IP/src/Stipple.jl:540
┌ Error: 2025-09-07 17:09:11 Failed to revise /workspaces/discrete-time-stochastic-epidemiological-model/lib/DiscreteTimeSIModel.jl
│   exception = Revise.ReviseEvalException("/workspaces/discrete-time-stochastic-epidemiological-model/lib/DiscreteTimeSIModel.jl:3", ArgumentError("Package DifferentialEquations not found in current path.\n- Run `import Pkg; Pkg.add(\"DifferentialEquations\")` to install the DifferentialEquations package."), Any[(top-level scope at DiscreteTimeSIModel.jl:3, 1)])
└ @ Revise /home/codespace/.julia/packages/Revise/PSzoa/src/packagedef.jl:741
┌ Warning: 2025-09-07 17:09:12 The running code does not match the saved version for the following files:
│ 
│   /workspaces/discrete-time-stochastic-epidemiological-model/lib/DiscreteTimeSIModel.jl
│ 
│ If the error was due to evaluation order, it can sometimes be resolved by calling `Revise.retry()`.
│ Use Revise.errors() to report errors again. Only the first error in each file is shown.
│ Your prompt color may be yellow until the errors are resolved.
└ @ Revise /home/codespace/.julia/packages/Revise/PSzoa/src/packagedef.jl:859
┌ Info: 2025-09-07 17:21:06 Watching ["/workspaces/discrete-time-stochastic-epidemiological-model"]
└ @ GenieAutoReload /home/codespace/.julia/packages/GenieAutoReload/qpImd/src/GenieAutoReload.jl:19
┌ Info: 2025-09-07 17:21:08 Autoreloading
└ @ GenieAutoReload /home/codespace/.julia/packages/GenieAutoReload/qpImd/src/GenieAutoReload.jl:22
┌ Info: 2025-09-07 17:21:16 
│ Web Server starting at http://127.0.0.1:8000 
└ @ Genie.Server /home/codespace/.julia/packages/Genie/y1eGj/src/Server.jl:182
┌ Info: 2025-09-07 17:21:16 Listening on: 127.0.0.1:8000, thread id: 1
└ @ HTTP.Servers /home/codespace/.julia/packages/HTTP/JcAHX/src/Servers.jl:382
┌ Warning: 2025-09-07 17:21:32 UndefVarError(:plotly, Main.App)
└ @ Genie.Renderer.Html /home/codespace/.julia/packages/Genie/y1eGj/src/renderers/Html.jl:154
┌ Error: 2025-09-07 17:21:37 Failed to store session data
└ @ GenieSessionFileSession /home/codespace/.julia/packages/GenieSessionFileSession/otnJC/src/GenieSessionFileSession.jl:41
┌ Error: 2025-09-07 17:21:40 SystemError("opening file \"/tmp/jl_kMmS9f/\"", 21, nothing)
└ @ GenieSessionFileSession /home/codespace/.julia/packages/GenieSessionFileSession/otnJC/src/GenieSessionFileSession.jl:42
┌ Error: 2025-09-07 17:21:40 Resetting session
└ @ GenieSessionFileSession /home/codespace/.julia/packages/GenieSessionFileSession/otnJC/src/GenieSessionFileSession.jl:46
┌ Error: 2025-09-07 17:21:41 Failed to store session data
└ @ GenieSessionFileSession /home/codespace/.julia/packages/GenieSessionFileSession/otnJC/src/GenieSessionFileSession.jl:41
┌ Error: 2025-09-07 17:21:41 SystemError("opening file \"/tmp/jl_kMmS9f/\"", 21, nothing)
└ @ GenieSessionFileSession /home/codespace/.julia/packages/GenieSessionFileSession/otnJC/src/GenieSessionFileSession.jl:42
┌ Error: 2025-09-07 17:21:41 Resetting session
└ @ GenieSessionFileSession /home/codespace/.julia/packages/GenieSessionFileSession/otnJC/src/GenieSessionFileSession.jl:46
┌ Info: 2025-09-07 17:21:44 Calling finalizers
└ @ Stipple /home/codespace/.julia/packages/Stipple/HO9IP/src/Stipple.jl:540
┌ Info: 2025-09-07 17:22:20 Calling finalizers
└ @ Stipple /home/codespace/.julia/packages/Stipple/HO9IP/src/Stipple.jl:540
